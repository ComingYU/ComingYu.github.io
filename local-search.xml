<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构与算法</title>
    <link href="/2023/11/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <url>/2023/11/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><code>各种算法可视化网站：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</code></p><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><ol><li>顺序查找<br><code>基本思路：</code>从第一个元素开始逐个与需要查找的元素进行比较，当找到相同的元素时返回该元素的下标，否则返回-1.<br><code>复杂度分析：</code>查找成功时，平均查找长度ASL&#x3D;（n+1）&#x2F;2;查找不成功时，需要n+1次比较，故时间复杂度为O(n)<br><code>优点：</code>对表中数据元素的存储没有要求，另：对于线性表，只能顺序查找<br><code>缺点：</code>当n很大时，平均查找长度很大，效率低<br><code>代码实现：</code>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sequenceSearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> key)</span>&#123;<br>        <span class="hljs-type">int</span> n=arr.length-<span class="hljs-number">1</span>;<br>        arr[<span class="hljs-number">0</span>]=key;<br>        <span class="hljs-keyword">while</span>(arr[n]!=key)&#123;<br>            n--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array = &#123;<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">43</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-number">43</span>;<br>        <span class="hljs-type">int</span>[] newArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[array.length+<span class="hljs-number">1</span>];<br>        newArray[<span class="hljs-number">0</span>] = target;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;array.length;i++)&#123;<br>            newArray[i+<span class="hljs-number">1</span>] = array[i];<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> sequenceSearch(newArray,target)-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(result != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;要查找的元素,在数组中的下标是：&quot;</span>+result);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;要查找的元素不在数组中&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>折半查找（二分查找）<br><code>基本思路：</code>用给定值k先与中间节点的关键字比较，中间结点把线性表的分成两个子表，若相等则查找成功；不相等则再根据k与该中间结点关键字的比较结果求顶下一步查找哪个子表，一直递归进行。<br><code>复杂度分析：</code>时间复杂度：每次把搜索区域减少一半，时间复杂度为O(logn);空间复杂度：O(1)即存放k的空间<br><code>优点：</code>当表不频繁更新时，效率比较理想<br><code>缺点：</code>当表频繁更新时，维护表的有序将花费较大的精力<br><code>代码实现（递归和非递归）：</code>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-comment">//非递归方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> len,<span class="hljs-type">int</span> target)</span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right=len-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> mid;<br>        <span class="hljs-keyword">while</span> (left&lt;=right)&#123;<br>            mid=(left+right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(target&lt;arr[mid])&#123;<br>                right=mid-<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target &gt; arr[mid]) &#123;<br>                left=mid+<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target == arr[mid]) &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//递归方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right,<span class="hljs-type">int</span> target)</span>&#123;<br>        <span class="hljs-keyword">if</span>(left&lt;=right)&#123;<br>            <span class="hljs-type">int</span> mid=(left+right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(arr[mid]==target)&#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; target) &#123;<br>                <span class="hljs-keyword">return</span> binarySearch2(arr,mid+<span class="hljs-number">1</span>,right,target);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> binarySearch2(arr,left,mid-<span class="hljs-number">1</span>,target);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> array[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-type">int</span> result1=binarySearch1(array,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>);<br>        <span class="hljs-type">int</span> result2=binarySearch2(array,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>);<br>        System.out.println(<span class="hljs-string">&quot;递归方法：要查找的元素在数组中的下标为&quot;</span>+result1);<br>        System.out.println(<span class="hljs-string">&quot;非递归方法：要查找的元素在数组中的下标为：&quot;</span>+result2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>索引查找（分块查找）<br><code>基本思路：</code>结合了顺序查找和折半查找，1.把数据分成n小块，要求第k块中的所有关键字都小于k+1块中的任意关键字；2.给每一块创建对象单独存到索引表；3.查找数据时先通过折半查找在索引表查当前数据属于哪一块；4.再到对应的块中顺序查找（块内无序，块间有序）<br><code>复杂度分析：</code>时间：O(logn)；空间O(n)<br><code>优点：</code>在表中插入和删除元素时，只需要找到对应的块，适合线性表既要快速查找又要经常改动的场景<br><code>缺点：</code>需要增加一个索引表的空间，需要对初始的索引表按照最大&#x2F;最小关键字进行排序和运算<br><code>代码实现：</code>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockTable</span> &#123;<br>        <span class="hljs-type">int</span> key;<span class="hljs-comment">//最大关键字</span><br>        <span class="hljs-type">int</span> low;<span class="hljs-comment">//起始下标</span><br>        <span class="hljs-type">int</span> high;<span class="hljs-comment">//结束下标</span><br><br>        BlockTable(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high) &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.low = low;<br>            <span class="hljs-built_in">this</span>.high = high;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Scanner input=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">//原表</span><br>        <span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">9</span>,<span class="hljs-number">22</span>,<span class="hljs-number">12</span>,<span class="hljs-number">14</span>,<span class="hljs-number">35</span>,<span class="hljs-number">42</span>,<span class="hljs-number">44</span>,<span class="hljs-number">38</span>,<span class="hljs-number">48</span>,<span class="hljs-number">60</span>,<span class="hljs-number">58</span>,<span class="hljs-number">47</span>,<span class="hljs-number">78</span>,<span class="hljs-number">80</span>,<span class="hljs-number">77</span>,<span class="hljs-number">82</span>&#125;;<br>        <span class="hljs-comment">//分块获得对应的索引表</span><br>        BlockTable [] arr=&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockTable</span>(<span class="hljs-number">22</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockTable</span>(<span class="hljs-number">44</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockTable</span>(<span class="hljs-number">60</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockTable</span>(<span class="hljs-number">82</span>,<span class="hljs-number">12</span>,<span class="hljs-number">15</span>)<br>        &#125;;<br>        <span class="hljs-comment">//打印原表</span><br>        System.out.print(<span class="hljs-string">&quot;原表元素如下：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            System.out.print(a[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        System.out.print(<span class="hljs-string">&quot;请输入你所要查询的关键字：&quot;</span>);<br>        <span class="hljs-type">int</span> key=input.nextInt();<br>        <span class="hljs-type">int</span> result=BlockSearch(a,arr,key);<br>        System.out.print(<span class="hljs-string">&quot;查询结果为：&quot;</span>+result);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>  <span class="hljs-title function_">BlockSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],BlockTable[] arr,<span class="hljs-type">int</span> key)</span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=arr.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//利用折半查找法查找元素所在的块</span><br>        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>            <span class="hljs-type">int</span> mid=(right-left)/<span class="hljs-number">2</span>+left;<br>            <span class="hljs-keyword">if</span>(arr[mid].key&gt;=key)&#123;<br>                right=mid-<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                left=mid+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//循环结束，元素所在的块为right+1 取对应左区间下标作为循环的开始点</span><br>        <span class="hljs-type">int</span> i=arr[right+<span class="hljs-number">1</span>].low;<br>        <span class="hljs-comment">//在块内进行顺序查找确定记录的最终位置</span><br>        <span class="hljs-keyword">while</span>(i&lt;=arr[right+<span class="hljs-number">1</span>].high&amp;&amp;a[i]!=key)&#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-comment">//如果下标在块的范围之内，说明查找成功，否则失败</span><br>        <span class="hljs-keyword">if</span>(i&lt;=arr[right+<span class="hljs-number">1</span>].high)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li><li>哈希查找<br><code>哈希表：</code>哈希表也叫散列表，是一种数据结构，它通过哈希函数将键映射到数组的特定位置，从而实现快速的数据检索。哈希表的基本思想是利用一个哈希函数将键映射到数组的索引，然后将值存储在该索引处。<br><code>构造哈希表：</code>除留余数法、平分取中法、随机数法、数字分析法等。<br><code>解决哈希冲突的方法：</code><br>1.链地址法：这是最常见的解决哈希冲突的方法。在每个哈希表位置（桶）上维护一个链表（或其他数据结构，如红黑树），所有映射到该位置的键值对都存储在链表中。当发生冲突时，新的键值对可以被添加到链表的末尾。链地址法简单且易于实现，适用于大多数应用。<br>2.开放地址法：在发生冲突时，通过一系列的探测方法（例如线性探测、二次探测、双重散列等）在哈希表中寻找下一个可用的位置，直到找到一个空闲的位置。开放地址法不使用额外的数据结构存储冲突的键值对，而是直接存储在哈希表的桶中。这种方法对于存储密集型的应用可能更有效，但在负载因子（键值对数量&#x2F;桶或数组数量）较高时容易产生聚集。<br>链地址法适用于插入和删除频繁的情况，而开放地址法适用于空间效率要求高、负载因子较低的情况。在实际应用中，链地址法更为常见。<br><code>代码实现：</code>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-comment">//哈希函数，这里用余数法</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(<span class="hljs-type">int</span>[] hashTable,<span class="hljs-type">int</span> data)</span>&#123;<br>        <span class="hljs-keyword">return</span> data%hashTable.length;<br>    &#125;<br><br>    <span class="hljs-comment">//这里使用开放地址法解决哈希冲突</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertHashTable</span><span class="hljs-params">(<span class="hljs-type">int</span>[] hashTable,<span class="hljs-type">int</span> target)</span>&#123;<br>        <span class="hljs-type">int</span> hashAddress=hash(hashTable,target);<br>        <span class="hljs-keyword">while</span> (hashTable[hashAddress]!=<span class="hljs-number">0</span>)&#123;<br>            hashAddress=(++hashAddress)%hashTable.length;<br>        &#125;<br>        hashTable[hashAddress]=target;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchHashTable</span><span class="hljs-params">(<span class="hljs-type">int</span>[] hashTable,<span class="hljs-type">int</span> target)</span>&#123;<br>        <span class="hljs-type">int</span> hashAddress=hash(hashTable,target);<br>        <span class="hljs-keyword">while</span>(hashTable[hashAddress]!=target)&#123;<br>            hashAddress=(++hashAddress%hashTable.length);<br>            <span class="hljs-keyword">if</span>(hashTable[hashAddress]==<span class="hljs-number">0</span>||hashAddress==hash(hashTable,target))&#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> hashAddress;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printHashTable</span><span class="hljs-params">(<span class="hljs-type">int</span>[] hashTable)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;hashTable.length;i++)<br>            System.out.print(hashTable[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        System.out.println();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array=&#123;<span class="hljs-number">13</span>,<span class="hljs-number">34</span>,<span class="hljs-number">65</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>,<span class="hljs-number">76</span>,<span class="hljs-number">87</span>,<span class="hljs-number">45</span>,<span class="hljs-number">85</span>,<span class="hljs-number">34</span>,<span class="hljs-number">23</span>,<span class="hljs-number">40</span>&#125;;<br>        <span class="hljs-type">int</span> hashLength=<span class="hljs-number">12</span>;<br>        <span class="hljs-type">int</span>[] hashTable=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[hashLength];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            insertHashTable(hashTable,array[i]);<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;哈希表：&quot;</span>);<br>        printHashTable(hashTable);<br>        <span class="hljs-type">int</span> target=<span class="hljs-number">40</span>;<br>        System.out.println(<span class="hljs-string">&quot;要查找的数据：&quot;</span>+target);<br>        <span class="hljs-type">int</span> result=searchHashTable(hashTable,target);<br>        <span class="hljs-keyword">if</span>(result==-<span class="hljs-number">1</span>)<br>            System.out.println(<span class="hljs-string">&quot;没有结果&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            System.out.println(<span class="hljs-string">&quot;在哈希表中的位置是：&quot;</span>+result);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3><ol><li><strong>双亲表示法</strong><br>在每个结点中保存指向双亲的指针（一般是数组下标）<br><img src="https://img-blog.csdnimg.cn/20210222174500547.png#pic_center" alt="image">  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_TREE_SIZE 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PNode</span> &#123;</span><br><span class="hljs-type">int</span> data;<br><span class="hljs-type">int</span> parent;<br>&#125;PNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">PTree</span>&#123;</span><br>PNode ndoes[MAX_TREE_SIZE];<br><span class="hljs-type">int</span> n;<span class="hljs-comment">//结点数</span><br>&#125;PTree;<br></code></pre></td></tr></table></figure></li></ol><ul><li>采用数组形式时，把根结点固定存在数组下标为0的位置，并且用-1表示没有父结点；</li><li>删除元素时，将该结点的双亲指针设为-1，结点数n–；或者把尾部数据移到前面，填充要删除的元素，最后n–。后者要更优。</li><li>如果删掉一颗子树，要将这棵子树的所有结点都删掉。</li><li>双亲表示法用来查询指定结点的双亲很简单，但是查找孩子结点只能从头到尾遍历对比。</li></ul><ol start="2"><li><strong>孩子表示法（顺序+链式）</strong><br>顺序存储各个结点，每个结点中保存孩子链表的头指针。<br><img src="https://img-blog.csdnimg.cn/20210222180209672.png#pic_center" alt="image"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_TREE_SIZE 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-type">int</span> child;<span class="hljs-comment">//孩子结点在数组中的位置</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CNode</span>* <span class="hljs-title">next</span>;</span><br>&#125;CNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-type">int</span> data;<br>CNode* firstchild;<br>&#125;CBox;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CTree</span>&#123;</span><br>CBox ndoes[MAX_TREE_SIZE];<br><span class="hljs-type">int</span> n,r;<span class="hljs-comment">//结点数,根的位置</span><br>&#125;CTree;<br></code></pre></td></tr></table></figure></li></ol><ul><li>各个结点的实际数据使用CBox存储</li><li>链表中的结点CNode只保存了每个孩子在数组中的下标</li></ul><ol start="3"><li><strong>孩子兄弟表示法</strong>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-type">char</span> data;<br>CSNode* firstchild, * nextsibling;<br>&#125;CSNode;<br></code></pre></td></tr></table></figure></li></ol><ul><li>这种存储方法和二叉链表相似</li><li>可以把*firstchild看作*lchild，把*nextsibling看作*rchild</li></ul><ol start="4"><li><strong>森林和树的转换</strong></li></ol><ul><li>森林转二叉树：先将森林中的各棵树转换为二叉树，在依次将各棵树的根结点看作兄弟关系。</li><li>二叉树转森林：左边为孩子，右边为兄弟</li></ul><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>结点和创建方法示例(遍历方法中所使用的)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_TREE_SIZE 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br><span class="hljs-type">int</span> data;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>* lchild;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>* rchild;<br>&#125;Node,*Pointer;<br><span class="hljs-function">Pointer <span class="hljs-title">CreatLink</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> data;<br><span class="hljs-type">int</span> temp;<br>Pointer p;<br><span class="hljs-built_in">scanf_s</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;data);<br>temp = <span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//吸收空格</span><br><span class="hljs-keyword">if</span> (data == <span class="hljs-number">-1</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<span class="hljs-comment">//数据为-1时表示该结点为叶子</span><br><span class="hljs-keyword">else</span> &#123;<br>p = (Pointer)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));<br>p-&gt;data = data;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入%d的左子树：&quot;</span>, data);<br>p-&gt;lchild = <span class="hljs-built_in">CreatLink</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入%d的右子树：&quot;</span>, data);<br>p-&gt;rchild = <span class="hljs-built_in">CreatLink</span>();<br><span class="hljs-keyword">return</span> p;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="四种遍历方法"><a href="#四种遍历方法" class="headerlink" title="四种遍历方法"></a>四种遍历方法</h4><ol><li><strong>先序遍历（Preorder Traversal）</strong><br>顺序为：根-&gt;左子树-&gt;右子树<br>可以想象为从根结点出发，逆时针绕着树跑一圈</li></ol><ul><li>递归方法<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span>  <span class="hljs-title function_">preorder</span><span class="hljs-params">(Pointer p)</span> &#123;<br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p-&gt;data);<span class="hljs-comment">//访问根结点</span><br>preorder(p-&gt;lchild);<span class="hljs-comment">//递归遍历左子树</span><br>preorder(p-&gt;rchild);<span class="hljs-comment">//递归遍历右子树</span><br><br>&#125;<br></code></pre></td></tr></table></figure></li><li>非递归方法：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//1.访问根结点，将根结点入栈</span><br><span class="hljs-comment">//2.循环访问左子树，入栈，当没有左子树的时候跳出循环</span><br><span class="hljs-comment">//3.栈不为空的时候根结点出栈，访问右子树</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preorder2</span><span class="hljs-params">(Pointer p)</span> </span>&#123;<br>std::stack&lt;Pointer&gt; s;<br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> || !s.<span class="hljs-built_in">empty</span>()) &#123;<br><span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,p-&gt;data);<br>s.<span class="hljs-built_in">push</span>(p);<br>p = p-&gt;lchild;<br>&#125;<br><span class="hljs-keyword">if</span> (！s.<span class="hljs-built_in">empty</span>()) &#123;<br>p = s.<span class="hljs-built_in">top</span>();<br>s.<span class="hljs-built_in">pop</span>();<br>p = p-&gt;rchild;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li><strong>中序遍历（Inorder Traversal）</strong><br>顺序为：左子树-&gt;根结点-&gt;右子树<br>可以看作每个结点垂直方向投射下来，从左往右读</li></ol><ul><li>递归方法<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">inorder</span><span class="hljs-params">(Pointer p)</span> &#123;<br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>inorder(p-&gt;lchild);<span class="hljs-comment">//递归遍历左子树</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p-&gt;data);<span class="hljs-comment">//访问根结点</span><br>inorder(p-&gt;rchild);<span class="hljs-comment">//递归遍历右子树</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>非递归方法<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//1.将根结点入栈</span><br><span class="hljs-comment">//2.循环访问左子树，入栈，当没有左子树时，跳出循环</span><br><span class="hljs-comment">//3.栈不为空时，根结点出栈，访问根结点，再访问右子树</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorder2</span><span class="hljs-params">(Pointer p)</span> </span>&#123;<br>std::stack&lt;Pointer&gt; s;<br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>||!s.<span class="hljs-built_in">empty</span>()) &#123;<br><span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>s.<span class="hljs-built_in">push</span>(p);<br>p = p-&gt;lchild;<br>&#125;<br><span class="hljs-keyword">if</span> (!s.<span class="hljs-built_in">empty</span>()) &#123;<br>p = s.<span class="hljs-built_in">top</span>();<br>s.<span class="hljs-built_in">pop</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p-&gt;data);<br>p = p-&gt;rchild;<br><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>后序遍历（Postorder Traversal）</strong><br>顺序为：左子树-&gt;右子树-&gt;根结点<br>可以看作从根结点逆时针绕圈，但只能单个地取下</li></ol><ul><li>递归方法<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">postorder</span><span class="hljs-params">(Pointer p)</span> &#123;<br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>postorder(p-&gt;lchild);<span class="hljs-comment">//递归遍历左子树</span><br>postorder(p-&gt;rchild);<span class="hljs-comment">//递归遍历右子树</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, p-&gt;data);<span class="hljs-comment">//访问根结点</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>非递归方法<br>由于根结点在孩子结点之后访问，当先遍历左子树时，要记录右子树是否访问过，这也是后序遍历和以上两种方法最大的区别<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postorder2</span><span class="hljs-params">(Pointer p)</span> </span>&#123;<br>std::stack&lt;Pointer&gt; s;<br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span>;<br>Pointer current = p;<br>Pointer lastVisited = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//根结点要在左右孩子都访问之后才能访问，如果先遍历左子树的话，需要记录右子树是否访问</span><br><span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span> || !s.<span class="hljs-built_in">empty</span>()) &#123;<br><span class="hljs-keyword">while</span> (current != <span class="hljs-literal">NULL</span>) &#123;<br>s.<span class="hljs-built_in">push</span>(current);<br>current = current-&gt;lchild;<br>&#125;<span class="hljs-comment">//遍历到没有左孩子的结点</span><br>Pointer top = s.<span class="hljs-built_in">top</span>();<br><span class="hljs-keyword">if</span> (top-&gt;rchild == <span class="hljs-literal">NULL</span> || top-&gt;rchild == lastVisited) &#123;<span class="hljs-comment">//如果根结点的右子树为空或者访问过就访问根结点</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, top-&gt;data);<br>s.<span class="hljs-built_in">pop</span>();<br>lastVisited = top;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>current = top-&gt;rchild;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li><p><strong>层序遍历（Level Order Traversal）</strong><br>按树的层次从左到右访问<br>层序遍历中，从根结点开始逐层遍历，先访问的结点后面不再用到，恰好符合队列先进先出的特点，所以借助队列来存储</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">levelorder</span><span class="hljs-params">(Pointer p)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>std::queue&lt;Pointer&gt; Queue;<br>Queue.<span class="hljs-built_in">push</span>(p);<br><span class="hljs-keyword">while</span> (!Queue.<span class="hljs-built_in">empty</span>()) &#123;<br>Pointer front = Queue.<span class="hljs-built_in">front</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, front-&gt;data);<br>Queue.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (front-&gt;lchild != <span class="hljs-literal">NULL</span>) &#123;<br>Queue.<span class="hljs-built_in">push</span>(front-&gt;lchild);<br>&#125;<br><span class="hljs-keyword">if</span> (front-&gt;rchild != <span class="hljs-literal">NULL</span>) &#123;<br>Queue.<span class="hljs-built_in">push</span>(front-&gt;rchild);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>运行示例</strong><br><img src="https://img-blog.csdnimg.cn/337b730e1f2b41aeac150763f10256e4.png" alt="图"><br>（0-9对应A-J）<br>输入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">3</span><br><span class="hljs-number">6</span><br><span class="hljs-number">-1</span><br><span class="hljs-number">-1</span><br><span class="hljs-number">7</span><br><span class="hljs-number">8</span><br><span class="hljs-number">-1</span><br><span class="hljs-number">-1</span><br><span class="hljs-number">-1</span><br><span class="hljs-number">-1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">4</span><br><span class="hljs-number">-1</span><br><span class="hljs-number">9</span><br><span class="hljs-number">-1</span><br><span class="hljs-number">-1</span><br><span class="hljs-number">5</span><br><span class="hljs-number">-1</span><br><span class="hljs-number">-1</span><br><br></code></pre></td></tr></table></figure><p>main函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Pointer p = <span class="hljs-built_in">CreatLink</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;先序：\n&quot;</span>);<br><span class="hljs-built_in">preorder</span>(p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">preorder2</span>(p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;中序：\n&quot;</span>);<br><span class="hljs-built_in">inorder</span>(p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">inorder2</span>(p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;后序：\n&quot;</span>);<br><span class="hljs-built_in">postorder</span>(p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">postorder2</span>(p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;层序：&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">levelorder</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><p>预期结果：<br>先序：0136782495<br>中序：6387104925<br>后序：6873194520<br>层序：0123456798<br>运行结果  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">先序：<br><span class="hljs-number">0136782495</span><br><span class="hljs-number">0136782495</span><br>中序：<br><span class="hljs-number">6387104925</span><br><span class="hljs-number">6387104925</span><br>后序：<br><span class="hljs-number">6873194520</span><br><span class="hljs-number">6873194520</span><br>层序：<br><span class="hljs-number">0123456798</span><br></code></pre></td></tr></table></figure><p>符合预期</p></li></ol><h4 id="二叉树的变形"><a href="#二叉树的变形" class="headerlink" title="二叉树的变形"></a>二叉树的变形</h4><ol><li>AVL树<br>得名于它的发明者——苏联的数学家Georgy Adelson-Velsky和Evgenii Landis<br>当搜索二叉树出现每个结点至多有一个孩子的情况时，搜索的效率甚至比链表还低，搜索二叉树基础上出现的AVL树（平衡二叉树）就解决了这样的问题，当平衡二叉树的某个结点左右子树的高度差的绝对值大于一时，就会通过旋转操作减小高度差。<br><code>特点：</code>是二叉搜索树；每个结点的左右子树的高度差绝对值（平衡因子）最大为1；当插入或删除一个结点时，导致某一个结点的平衡因子大于1，就需要通过左旋和右旋使二叉树再次达到平衡状态。<br>avl树的旋转分四种情况：<br>1.在右子树的右子树上插入结点，导致不平衡：左旋<br>2.在左子树的左子树上插入结点，导致不平衡：右旋<br>3.在左子树的右子树上插入结点，导致不平衡：先对左子树左旋再对整棵树右旋<br>4.在右子树的左子树上插入结点，导致不平衡：先对右子树右旋再对整棵树左旋<br>示例代码：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">avlTree</span>&lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;E&gt;&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>        E value;<br>        Node left;<br>        Node right;<br>        <span class="hljs-type">int</span> height;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">()</span>&#123;&#125;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(E value)</span>&#123;<br>            <span class="hljs-built_in">this</span>.value=value;<br>            height=<span class="hljs-number">1</span>;<br>            left=<span class="hljs-literal">null</span>;<br>            right=<span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>            System.out.print(<span class="hljs-built_in">this</span>.value+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    Node root;<br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(Node node)</span>&#123;<br>        <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> node.height;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBalanceFactor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> getBalanceFactor(root);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBalanceFactor</span><span class="hljs-params">(Node root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> getHeight(root.left)-getHeight(root.right);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalance</span><span class="hljs-params">(Node node)</span>&#123;<br>        <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> balanceFactor=Math.abs(getBalanceFactor(node.left)-getBalanceFactor(node.right));<br>        <span class="hljs-keyword">if</span>(balanceFactor&gt;<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> isBalance(node.left)&amp;&amp;isBalance(node.right);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> isBalance(root);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inPreOrder</span><span class="hljs-params">(Node root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span>;<br>        inPreOrder(root.left);<br>        root.print();<br>        inPreOrder(root.right);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inPreOrder</span><span class="hljs-params">()</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;中序遍历结果：&quot;</span>);<br>        inPreOrder(root);<br>    &#125;<br>    <span class="hljs-comment">//左旋方法，返回根结点</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">leftRotate</span><span class="hljs-params">(Node node)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;leftRotate&quot;</span>);<br>        Node cur=node.right;<br>        node.right=cur.left;<br>        cur.left=node;<br>        <span class="hljs-comment">//更新</span><br>        node.height=Math.max(getHeight(node.left),getHeight(node.right))+<span class="hljs-number">1</span>;<br>        cur.height=Math.max(getHeight(cur.left),getHeight(cur.right))+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br>    <span class="hljs-comment">//右旋方法，返回根结点</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">rightRotate</span><span class="hljs-params">(Node node)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;rightRotate&quot;</span>);<br>        Node cur=node.left;<br>        node.left=cur.right;<br>        cur.right=node;<br>        <span class="hljs-comment">//更新</span><br>        node.height=Math.max(getHeight(node.left),getHeight(node.right))+<span class="hljs-number">1</span>;<br>        cur.height=Math.max(getHeight(cur.left),getHeight(cur.right))+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br>    <span class="hljs-comment">//添加元素</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span>&#123;<br>        root = add(root,e);<br>    &#125;<br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">add</span><span class="hljs-params">(Node node, E value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            size++;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(value);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (value.compareTo(node.value) &gt; <span class="hljs-number">0</span>) &#123;<br>            node.right = add(node.right, value);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value.compareTo(node.value) &lt; <span class="hljs-number">0</span>) &#123;<br>            node.left = add(node.left, value);<br>        &#125;<br>        <span class="hljs-comment">//更新节点高度</span><br>        node.height = Math.max(getHeight(node.left), getHeight(node.right)) + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//获取当前节点的平衡因子</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">balanceFactor</span> <span class="hljs-operator">=</span> getBalanceFactor(node);<br>        <span class="hljs-comment">//该子树不平衡且新插入节点(导致不平衡的节点)在左子树的左子树上，此时需要进行右旋</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.left) &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> rightRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//该子树不平衡且新插入节点(导致不平衡的节点)在右子树子树的右子树上，此时需要进行左旋</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.right) &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> leftRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//该子树不平衡且新插入节点(导致不平衡的节点)在左子树的右子树上，此时需要先对左子树左旋，在整个树右旋</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.left) &lt; <span class="hljs-number">0</span>) &#123;<br>            node.left = leftRotate(node.left);<br>            <span class="hljs-keyword">return</span> rightRotate(node);<br>        &#125;<br>        <span class="hljs-comment">//balanceFactor &lt; -1 &amp;&amp; getBalanceFactor(node.left) &gt; 0</span><br>        <span class="hljs-comment">//该子树不平衡且新插入节点(导致不平衡的节点)在右子树的左子树上，此时需要先对右子树右旋，再整个树左旋</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(node.right) &gt; <span class="hljs-number">0</span>) &#123;<br>            node.right = rightRotate(node.right);<br>            <span class="hljs-keyword">return</span> leftRotate(node);<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>    <span class="hljs-comment">//删除节点</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">remove</span><span class="hljs-params">(E value)</span>&#123;<br>        root = remove(root,value);<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root.value;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">remove</span><span class="hljs-params">(Node node, E value)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">retNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> retNode;<br>        <span class="hljs-keyword">if</span>(value.compareTo(node.value) &gt; <span class="hljs-number">0</span>)&#123;<br>            node.right = remove(node.right,value);<br>            retNode = node;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(value.compareTo(node.value) &lt; <span class="hljs-number">0</span>)&#123;<br>            node.left = remove(node.left,value);<br>            retNode = node;<br>        &#125;<br>        <span class="hljs-comment">//value.compareTo(node.value) = 0</span><br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//左右节点都为空，或者左节点为空</span><br>            <span class="hljs-keyword">if</span>(node.left == <span class="hljs-literal">null</span>)&#123;<br>                size--;<br>                retNode = node.right;<br>            &#125;<br>            <span class="hljs-comment">//右节点为空</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(node.right == <span class="hljs-literal">null</span>)&#123;<br>                size--;<br>                retNode = node.left;<br>            &#125;<br>            <span class="hljs-comment">//左右节点都不为空</span><br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">successor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>                <span class="hljs-comment">//寻找右子树最小的节点</span><br>                <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> node.right;<br>                <span class="hljs-keyword">while</span>(cur.left != <span class="hljs-literal">null</span>)&#123;<br>                    cur = cur.left;<br>                &#125;<br>                successor.value  = cur.value;<br>                successor.right = remove(node.right,value);<br>                successor.left = node.left;<br>                node.left =  node.right = <span class="hljs-literal">null</span>;<br>                retNode = successor;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(retNode == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">//维护二叉树平衡</span><br>            <span class="hljs-comment">//跟新height</span><br>            retNode.height = Math.max(getHeight(retNode.left),getHeight(retNode.right));<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">balanceFactor</span> <span class="hljs-operator">=</span> getBalanceFactor(retNode);<br>        <span class="hljs-comment">//该子树不平衡且新插入节点(导致不平衡的节点)在左子树的左子树上，此时需要进行右旋</span><br>        <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(retNode.left) &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> rightRotate(retNode);<br>        &#125;<br>        <span class="hljs-comment">//该子树不平衡且新插入节点(导致不平衡的节点)在右子树子树的右子树上，此时需要进行左旋</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(retNode.right) &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> leftRotate(retNode);<br>        &#125;<br>        <span class="hljs-comment">//该子树不平衡且新插入节点(导致不平衡的节点)在左子树的右子树上，此时需要先对左子树左旋，在整个树右旋</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (balanceFactor &gt; <span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(retNode.left) &lt; <span class="hljs-number">0</span>) &#123;<br>            retNode.left = leftRotate(retNode.left);<br>            <span class="hljs-keyword">return</span> rightRotate(retNode);<br>        &#125;<br>        <span class="hljs-comment">//该子树不平衡且新插入节点(导致不平衡的节点)在右子树的左子树上，此时需要先对右子树右旋，再整个树左旋</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(balanceFactor &lt; -<span class="hljs-number">1</span> &amp;&amp; getBalanceFactor(retNode.right) &gt; <span class="hljs-number">0</span>) &#123;<br>            retNode.right = rightRotate(retNode.right);<br>            <span class="hljs-keyword">return</span> leftRotate(retNode);<br>        &#125;<br>        <span class="hljs-keyword">return</span>  retNode;<br>    &#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>测试代码（这里仅以往右子树的左子树上插入结点导致不平衡为例）：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        avlTree&lt;Integer&gt; avlTree=<span class="hljs-keyword">new</span> <span class="hljs-title class_">avlTree</span>&lt;&gt;();<br>        avlTree.root=avlTree.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-number">20</span>);<br>        avlTree.add(<span class="hljs-number">15</span>);<br>        avlTree.add(<span class="hljs-number">50</span>);<br>        avlTree.add(<span class="hljs-number">40</span>);<br>        avlTree.add(<span class="hljs-number">70</span>);<br>        avlTree.add(<span class="hljs-number">35</span>);<br>        avlTree.inPreOrder();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>运行结果：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">中序遍历结果：<span class="hljs-number">15</span> <span class="hljs-number">20</span> <span class="hljs-number">35</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span> <span class="hljs-number">70</span> <br></code></pre></td></tr></table></figure></li><li>哈夫曼树（Huffman Tree）<br>哈夫曼编码是一种统计编码，属于无损压缩编码，对于出现频率较高的字符，编码的长度较短，堆出现频率较低的，编码的长度较长。<br>哈夫曼树又称最优二叉树，是一种带权路径长度最短的二叉树。<br>哈夫曼编码实现步骤：<br>1.统计：读入要压缩的源文件，统计字符出现的次数<br>2.建树：构建哈夫曼树<br>3.编码：对哈夫曼树的左边记为0，右边记为1，就可以得到字符的哈夫曼编码<br>4.输出：把编码序列输出，这就是压缩后的数据<br>解码实现步骤：<br>1.读取码表的信息，构建出码表<br>2.读回具体的数据内容<br>3.把读回的字节还原成对应的整型数据<br>4.根据码表，把内容组成的哈夫曼树编码，依次转换回原始的字符，得到原始内容<br>利用哈夫曼编码实现简单的文件压缩和解压：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuffmanTree</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decompress</span><span class="hljs-params">(String fileName,String newfile)</span>&#123;<br><br>        DataInputStream in=<span class="hljs-literal">null</span>;<br>        String srcContent=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            in=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName)));<br>            <span class="hljs-comment">//      1. 读取码表的信息，构建出码表</span><br>            Map&lt;String,String&gt; map=readCodes(in);<br>            <span class="hljs-comment">//      2. 读回具体的数据内容</span><br>            <span class="hljs-type">byte</span>[] datas=<span class="hljs-built_in">this</span>.readDatas(in);<br>            <span class="hljs-comment">//      3. 把读回的字节还原成对应的整型数据</span><br>            <span class="hljs-type">int</span>[] dataInts=<span class="hljs-built_in">this</span>.bytetoIntArray(datas);<br>            <span class="hljs-comment">//      4. 根据码表，把内容组成的哈夫曼树编码，依次转换回原始的字符，得到原始内容</span><br>            srcContent=<span class="hljs-built_in">this</span>.HuffmanChar(map,dataInts);<br>            <span class="hljs-comment">//      5. 将内容写进文件</span><br>            <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(newfile));<br>            writer.write(srcContent);<br>            writer.close();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                in.close();<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//把Huffman编码转为原始的内容</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">HuffmanChar</span><span class="hljs-params">(Map&lt;String,String&gt; map,<span class="hljs-type">int</span>[] dataInts)</span>&#123;<br>        StringBuffer buffer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-comment">//1.把整形数组还原成为对应的字符串，也就是Huffman编码串</span><br>        String str=<span class="hljs-built_in">this</span>.intToBinaryString(dataInts);<br>        <span class="hljs-comment">//2.把Huffman编码串依次替换回字符</span><br>        <span class="hljs-keyword">while</span> (str.length()&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(String code:map.keySet())&#123;<br>                <span class="hljs-keyword">if</span>(str.startsWith(code))&#123;<br>                    buffer.append(map.get(code));<br>                    str=str.substring(code.length());<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> buffer.toString();<br>    &#125;<br>    <span class="hljs-comment">//把int值转换回对应的二进制编码表示的字符串</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">intToBinaryString</span><span class="hljs-params">(<span class="hljs-type">int</span>[] as)</span>&#123;<br>        <span class="hljs-type">int</span> len=as.length;<br>        <span class="hljs-comment">//用数组存放每个byte对应的二进制字符串</span><br>        String[] ss=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[len];<br>        String binaryStr=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-comment">//得到每个整数对应的二进制字符串</span><br>            ss[i]=Integer.toBinaryString(as[i]);<br>            ss[i]=<span class="hljs-built_in">this</span>.addZero(ss[i]);<br>            binaryStr+=ss[i];<br>        &#125;<br>        <span class="hljs-comment">//处理尾部原来补的零</span><br>        <span class="hljs-type">int</span> zeros=as[len-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(zeros&gt;<span class="hljs-number">0</span>)&#123;<br>            binaryStr=binaryStr.substring(<span class="hljs-number">0</span>,binaryStr.length()-zeros);<br>        &#125;<br>        <span class="hljs-keyword">return</span> binaryStr;<br>    &#125;<br>    <span class="hljs-comment">//给每个二进制字符串补足八位</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">addZero</span><span class="hljs-params">(String str)</span>&#123;<br>        <span class="hljs-keyword">if</span>(str.length()&lt;<span class="hljs-number">8</span>)&#123;<br>            <span class="hljs-type">int</span> zeroNum=<span class="hljs-number">8</span>-str.length();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;zeroNum;i++)&#123;<br>                str=<span class="hljs-string">&quot;0&quot;</span>+str;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] bytetoIntArray(<span class="hljs-type">byte</span>[] datas)&#123;<br>        <span class="hljs-type">int</span>[] as=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[datas.length];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;datas.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(datas[i]&gt;=<span class="hljs-number">0</span>)&#123;<br>                as[i]=datas[i];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                as[i]=datas[i]+<span class="hljs-number">256</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> as;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] readDatas(DataInputStream in) <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//读回有多少个byte</span><br>        <span class="hljs-type">int</span> dataByteNum=in.readInt();<br>        <span class="hljs-comment">//2.创建出byte数组</span><br>        <span class="hljs-type">byte</span>[] bs=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[dataByteNum];<br>        <span class="hljs-comment">//3.循环把每个byte读取回来</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;dataByteNum;i++)&#123;<br>            bs[i] =in.readByte();<br>        &#125;<br>        <span class="hljs-keyword">return</span> bs;<br>    &#125;<br>    <span class="hljs-comment">//map.key是编码，value是字符</span><br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; <span class="hljs-title function_">readCodes</span><span class="hljs-params">(DataInputStream in)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Map&lt;String,String&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,String&gt;();<br>        <span class="hljs-comment">//1.读回编码个数</span><br>        <span class="hljs-type">int</span> codeNum=in.readInt();<br>        <span class="hljs-comment">//2.读回每个字符、编码长度、Huffman编码</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;codeNum;i++)&#123;<br>            <span class="hljs-type">char</span> codeChar=in.readChar();<br>            <span class="hljs-type">int</span> codeLen=in.readInt();<br>            String code=<span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-type">char</span>[] cs=<span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[codeLen];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;cs.length;j++)&#123;<br>                code+=in.readChar();<br>            &#125;<br>            map.put(code,<span class="hljs-string">&quot;&quot;</span>+codeChar);<br>        &#125;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">compress</span><span class="hljs-params">(String str,String outFile)</span>&#123;<br><br>        <span class="hljs-comment">//统计</span><br>        PriorityQueue queue=<span class="hljs-built_in">this</span>.statistics(str);<br>        <span class="hljs-comment">//建树</span><br>        HuffmanNode tree=<span class="hljs-built_in">this</span>.buidHuffmantree(queue);<br>        <span class="hljs-comment">//编码</span><br>        Map&lt;String,String&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>        <span class="hljs-built_in">this</span>.buildHuffmanCode(map,tree,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">//输出</span><br>        <span class="hljs-built_in">this</span>.outData(str,map,outFile);<br>    &#125;<br>    <span class="hljs-keyword">private</span> PriorityQueue <span class="hljs-title function_">statistics</span><span class="hljs-params">(String str)</span>&#123;<br>        <span class="hljs-comment">//1.统计次数</span><br>        Map&lt;Character,Integer&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Character,Integer&gt;();<br>        <span class="hljs-type">char</span>[] cs=str.toCharArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c:cs)&#123;<br>            Object obj=map.get(c);<br>            <span class="hljs-keyword">if</span>(obj==<span class="hljs-literal">null</span>)&#123;<br>                map.put(c,<span class="hljs-number">1</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                map.put(c,((Integer)obj)+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//2.构建优先队列</span><br>        PriorityQueue queue=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(map.size());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c:map.keySet())&#123;<br>            HuffmanNode node=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>(c,map.get(c));<br>            queue.insert(node);<br>        &#125;<br>        <span class="hljs-keyword">return</span> queue;<br>    &#125;<br>    <span class="hljs-keyword">private</span> HuffmanNode <span class="hljs-title function_">buidHuffmantree</span><span class="hljs-params">(PriorityQueue queue)</span>&#123;<br>        <span class="hljs-keyword">while</span> (queue.size()&gt;<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//1.先取两个最小权重的对象</span><br>            <span class="hljs-type">HuffmanNode</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> queue.remove();<br>            <span class="hljs-type">HuffmanNode</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> queue.remove();<br>            <span class="hljs-comment">//2.构建这两个对象的父对象</span><br>            <span class="hljs-type">HuffmanNode</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>((<span class="hljs-type">char</span>) <span class="hljs-number">0</span>, n1.getCount() + n2.getCount());<br>            n3.setLeftchild(n1);<br>            n3.setRightchild(n2);<br>            <span class="hljs-comment">//3.把父对象放回优先队列</span><br>            queue.insert(n3);<br>        &#125;<br>        <span class="hljs-keyword">return</span> queue.peekFront();<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildHuffmanCode</span><span class="hljs-params">(Map&lt;String,String&gt; map,HuffmanNode tree,String zero_one)</span>&#123;<br><br>        <span class="hljs-comment">//1.树没有子节点</span><br>        <span class="hljs-keyword">if</span>(tree.getLeftchild()==<span class="hljs-literal">null</span>&amp;&amp;tree.getRightchild()==<span class="hljs-literal">null</span>)&#123;<br>            map.put(<span class="hljs-string">&quot;&quot;</span>+tree.getC(),zero_one);<br>        &#125;<br>        <span class="hljs-comment">//2.有左子节点</span><br>        <span class="hljs-keyword">if</span>(tree.getLeftchild()!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.buildHuffmanCode(map,tree.getLeftchild(),zero_one+<span class="hljs-string">&quot;0&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//3.有右子节点</span><br>        <span class="hljs-keyword">if</span>(tree.getRightchild()!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.buildHuffmanCode(map,tree.getRightchild(),zero_one+<span class="hljs-string">&quot;1&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//输出数据到文件</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">outData</span><span class="hljs-params">(String str,Map&lt;String,String&gt; map,String outFileName)</span>&#123;<br>        File outFile=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(outFileName);<br>        DataOutputStream os=<span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            os=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(outFile));<br>            <span class="hljs-comment">//1.输出码表</span><br>            <span class="hljs-built_in">this</span>.outCodes(os,map);<br>            <span class="hljs-comment">//2.输出原内容的每个字符对应的Huffman编码</span><br>            String dataHuffmanCode=<span class="hljs-built_in">this</span>.sourceHuffman(str,map);<br>            <span class="hljs-built_in">this</span>.outDataHuffmanCode(os,dataHuffmanCode);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                os.close();<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <span class="hljs-comment">//输出原始内容转换为Huffman编码串</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">outDataHuffmanCode</span><span class="hljs-params">(DataOutputStream os, String dataHuffmanCode)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1.要将Huffman编码串转换成为对应的byte[]</span><br>        <span class="hljs-type">byte</span>[] bs=<span class="hljs-built_in">this</span>.stringtoByteArrays(dataHuffmanCode);<br>        <span class="hljs-comment">//2.输出byte数组的个数</span><br>        os.writeInt(bs.length);<br>        <span class="hljs-comment">//3.输出byte数组</span><br>        os.write(bs);<br>    &#125;<br>    <span class="hljs-comment">//把一个内容是二进制编码的串转换为真正的二进制数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] stringtoByteArrays(String dataHuffmanCode)&#123;<br>        <span class="hljs-type">byte</span>[] retBytes=<span class="hljs-literal">null</span>;<br>        <span class="hljs-type">char</span>[] cs=dataHuffmanCode.toCharArray();<br>        <span class="hljs-type">int</span> len=cs.length;<br>        <span class="hljs-type">int</span> lenByte=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//1.判断整个串的长度是否能被8整除</span><br><br>        <span class="hljs-keyword">if</span>(len%<span class="hljs-number">8</span>==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 2.能被8整除就八位作一个byte</span><br>            lenByte=len/<span class="hljs-number">8</span>+<span class="hljs-number">1</span>;<span class="hljs-comment">//最后要存放补零的个数</span><br>            retBytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[lenByte];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;lenByte-<span class="hljs-number">1</span>;i++)&#123;<br>                String s=<span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i*<span class="hljs-number">8</span>;j&lt;(i+<span class="hljs-number">1</span>)*<span class="hljs-number">8</span>;j++)&#123;<br>                    s+=cs[j];<br>                &#125;<br>                retBytes[i]=<span class="hljs-built_in">this</span>.chartoByte(s);<br>            &#125;<br>            <span class="hljs-comment">//设置补零的个数</span><br>            retBytes[lenByte-<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//3.不能的话最后一个字符串后面补0，作为一个byte，同时寄了补零的个数</span><br>            lenByte=len/<span class="hljs-number">8</span>+<span class="hljs-number">2</span>;<br>            retBytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[lenByte];<br>            <span class="hljs-type">int</span> zeroNum=<span class="hljs-number">8</span>-len%<span class="hljs-number">8</span>;<br>            <span class="hljs-comment">//补零</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;zeroNum;i++)&#123;<br>                dataHuffmanCode+=<span class="hljs-string">&quot;0&quot;</span>;<br>            &#125;<br>            <span class="hljs-comment">//重新计算char数组</span><br>            cs=dataHuffmanCode.toCharArray();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;lenByte-<span class="hljs-number">1</span>;i++)&#123;<br>                String s=<span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i*<span class="hljs-number">8</span>;j&lt;(i+<span class="hljs-number">1</span>)*<span class="hljs-number">8</span>;j++)&#123;<br>                    s+=cs[j];<br>                &#125;<br>                retBytes[i]=<span class="hljs-built_in">this</span>.chartoByte(s);<br>            &#125;<br>            <span class="hljs-comment">//设置补零的个数</span><br>            retBytes[lenByte-<span class="hljs-number">1</span>]=(<span class="hljs-type">byte</span>) zeroNum;<br>        &#125;<br>        <span class="hljs-keyword">return</span> retBytes;<br>    &#125;<br>    <span class="hljs-comment">//把一个字符串转换为byte</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span> <span class="hljs-title function_">chartoByte</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">byte</span> ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span>[] cs=s.toCharArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cs.length;i++)&#123;<br>            <span class="hljs-comment">//计算每一位char代表的真正byte值</span><br>            <span class="hljs-type">byte</span> tempB=(<span class="hljs-type">byte</span>) (Byte.parseByte(<span class="hljs-string">&quot;&quot;</span>+cs[i])*Math.pow(<span class="hljs-number">2</span>,cs.length-i-<span class="hljs-number">1</span>));<br>            ret=(<span class="hljs-type">byte</span>)(ret+tempB);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-comment">//把原始内容转换成Huffman编码串</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">sourceHuffman</span><span class="hljs-params">(String str, Map&lt;String, String&gt; map)</span> &#123;<br>        StringBuffer buffer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-type">char</span>[] cs=str.toCharArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c:cs)&#123;<br>            buffer.append(map.get(<span class="hljs-string">&quot;&quot;</span>+c));<br>        &#125;<br>        <span class="hljs-keyword">return</span> buffer.toString();<br>    &#125;<br>    <span class="hljs-comment">//输出码表</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">outCodes</span><span class="hljs-params">(DataOutputStream os,Map&lt;String,String&gt; map)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1.输出码的个数</span><br>        os.writeInt(map.size());<br>        <span class="hljs-keyword">for</span>(String key:map.keySet())&#123;<br>            <span class="hljs-comment">//2.输出每个字符以及编码的长度</span><br>            os.writeChar(key.charAt(<span class="hljs-number">0</span>));<br>            os.writeInt(map.get(key).length());<br>            <span class="hljs-comment">//3.输出每个字符对应的Huffman编码</span><br>            os.writeChars(map.get(key));<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//读文件</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">readFile</span><span class="hljs-params">(String fileName)</span>&#123;<br>        StringBuffer buffer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        DataInputStream in=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            in=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName)));<br>            String tempStr=<span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">while</span> ((tempStr=in.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>                buffer.append(tempStr+=<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                in.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> buffer.toString();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        HuffmanTree t=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanTree</span>();<br><span class="hljs-comment">//        t.compress(&quot;aaabbddddd&quot;);</span><br>       <span class="hljs-comment">//t.compress(t.readFile(&quot;D:\\HuaweiMoveData\\Users\\86191\\Desktop\\test.txt&quot;),&quot;D:\\HuaweiMoveData\\Users\\86191\\Desktop\\temp.myzip&quot;);</span><br>        String in=sc.next();<br>        <span class="hljs-keyword">if</span>(in.equals(<span class="hljs-string">&quot;压缩&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入需要压缩文件的地址：&quot;</span>);<br>            String location=sc.next();<br>            System.out.println(<span class="hljs-string">&quot;请输入压缩文件的存储位置：&quot;</span>);<br>            String newfile=sc.next();<br>            <span class="hljs-keyword">try</span>&#123;<br>            t.compress(t.readFile(location),newfile);<br>            System.out.println(<span class="hljs-string">&quot;已保存&quot;</span>);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                System.out.println(<span class="hljs-string">&quot;文件路径错误&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in.equals(<span class="hljs-string">&quot;解压缩&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入需要解压缩的文件的地址：&quot;</span>);<br>            String location=sc.next();<br>            System.out.println(<span class="hljs-string">&quot;请输入保存新文件的地址：&quot;</span>);<br>            String newfile=sc.next();<br>            <span class="hljs-keyword">try</span>&#123;<br>                t.decompress(location,newfile);<br>                System.out.println(<span class="hljs-string">&quot;已保存&quot;</span>);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                System.out.println(<span class="hljs-string">&quot;文件路径错误&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入正确的指令&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>优先队列PriorityQueue类：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PriorityQueue</span> &#123;<br>    <span class="hljs-keyword">private</span> HuffmanNode[] queue;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> length;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> nItems;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> length)</span>&#123;<br>        queue=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>[length];<br>        <span class="hljs-built_in">this</span>.length=length;<br>        nItems=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(HuffmanNode data)</span>&#123;<br>        <span class="hljs-keyword">if</span>(nItems==<span class="hljs-number">0</span>)&#123;<br>            queue[nItems]=data;<br>            nItems++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(i=nItems-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>                <span class="hljs-keyword">if</span>(data.getCount()&lt;queue[i].getCount())&#123;<br>                    queue[i+<span class="hljs-number">1</span>]=queue[i];<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>            &#125;<br>            queue[i+<span class="hljs-number">1</span>]=data;<br>            nItems++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> HuffmanNode <span class="hljs-title function_">remove</span><span class="hljs-params">()</span>&#123;<br>        nItems--;<br>        HuffmanNode temp=queue[nItems];<br>        queue[nItems]=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HuffmanNode <span class="hljs-title function_">peekFront</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> queue[nItems-<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> nItems==<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> nItems==queue.length;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printQueue</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------&quot;</span>);<br>        <span class="hljs-keyword">for</span>(HuffmanNode d:queue)&#123;<br>            System.out.println(d);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> nItems;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        PriorityQueue t=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">5</span>);<br>        t.insert(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">5</span>));<br>        t.insert(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">6</span>));<br>        t.insert(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">3</span>));<br>        t.insert(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>(<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-number">4</span>));<br>        t.insert(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HuffmanNode</span>(<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-number">1</span>));<br><br>        t.printQueue();<br>        HuffmanNode ret=t.peekFront();<br>        System.out.println(<span class="hljs-string">&quot;now ret:&quot;</span>+ret);<br>        t.remove();<br>        HuffmanNode ret2=t.remove();<br>        System.out.println(<span class="hljs-string">&quot;now ret2:&quot;</span>+ret2);<br>        t.printQueue();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>哈夫曼树结点HuffmanNode类：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HuffmanNode</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> c;<span class="hljs-comment">//字符</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<span class="hljs-comment">//出现的次数</span><br><br>    <span class="hljs-keyword">private</span> HuffmanNode leftchild;<br>    <span class="hljs-keyword">private</span> HuffmanNode rightchild;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HuffmanNode</span><span class="hljs-params">(<span class="hljs-type">char</span> c, <span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.c = c;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HuffmanNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;c=&quot;</span> + c +<br>                <span class="hljs-string">&quot;, count=&quot;</span> + count +<br>                <span class="hljs-string">&quot;, leftchild=&quot;</span> + leftchild +<br>                <span class="hljs-string">&quot;, rightchild=&quot;</span> + rightchild +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getC</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setC</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-built_in">this</span>.c = c;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCount</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HuffmanNode <span class="hljs-title function_">getLeftchild</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> leftchild;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeftchild</span><span class="hljs-params">(HuffmanNode leftchild)</span> &#123;<br>        <span class="hljs-built_in">this</span>.leftchild = leftchild;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HuffmanNode <span class="hljs-title function_">getRightchild</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> rightchild;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRightchild</span><span class="hljs-params">(HuffmanNode rightchild)</span> &#123;<br>        <span class="hljs-built_in">this</span>.rightchild = rightchild;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>堆（待补充）<br>**<code>堆：</code>**如果有一个关键码的集合K，把它的所有元素按照完全二叉树的顺序存储方式存储在一个一维数组中，并满足Ki&lt;&#x3D;K2i+1且Ki&lt;&#x3D;K2i+2（或大于等于），则称为小堆（或大堆），根结点最小的交小根堆或最小堆，最大的叫大根堆或最大堆。<br><code>性质：</code>堆中某个节点的值总是不大于或者不小于其父节点的值；堆总是一颗完全二叉树。<br><code>堆和栈的区别：</code><br>申请方式不同：栈由系统自动分配，堆是人为申请开辟<br>申请大小不同：栈获得的空间较小，堆获得的空间较大<br>申请效率不同：栈由系统自动分配，速度较快，堆一般速度较慢<br>存储内容（使用场景）不同：栈适用于需要快速分配和释放内存、局部变量生命周期明确定义的情况，常用于存储基本数据类型、对象引用等；堆适用于需要动态分配内存、生命周期不确定、大小不确定的情况，常用于存储复杂数据结构、大型对象等。<br>底层不同：栈是连续空间，堆是不连续空间<br>**<code>堆排序</code>**：<br>堆排序是利用堆这种数据结构而设计的一种排序算法，最好、最坏、平均时间复杂度均为O(nlongn)，它也是不稳定排序。<br>例：列出对n个数堆升序排序后的前m个数<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.输入n个数</span><br><span class="hljs-comment">2.从n/2开始自下而上建堆，对每个父结点下滤down()（子节点小于父结点则交换，再递归调用down()）,得到小顶堆</span><br><span class="hljs-comment">3.输出堆顶的数据，再将最后一个数据和第一个交换，size-1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N], size;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span><span class="hljs-comment">//比较三个数当中的最小值 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> t = u;<br><span class="hljs-comment">//左子节点 （左子节点存在且左子节点小于父节点） </span><br><span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t])<br>t = u * <span class="hljs-number">2</span>;<br><span class="hljs-comment">//右子节点 （右子节点存在且右子节点小于父节点） </span><br><span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t])<br>t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (u != t)<br>&#123;<br><span class="hljs-built_in">swap</span>(h[u], h[t]);<br><span class="hljs-built_in">down</span>(t);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>cin &gt;&gt; h[i];<br>size = n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n / <span class="hljs-number">2</span>; i != <span class="hljs-number">0</span>; i--)<br><span class="hljs-built_in">down</span>(i);<br><span class="hljs-keyword">while</span> (m--)<br>&#123;<br>cout &lt;&lt; h[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>h[<span class="hljs-number">1</span>] = h[size];<br>size--;<br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>测试输入：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">9</span> <span class="hljs-number">9</span><br><span class="hljs-number">23</span> <span class="hljs-number">45</span> <span class="hljs-number">23</span> <span class="hljs-number">56</span> <span class="hljs-number">765</span> <span class="hljs-number">23</span> <span class="hljs-number">45</span> <span class="hljs-number">42</span> <span class="hljs-number">86</span><br></code></pre></td></tr></table></figure>输出：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">23</span> <span class="hljs-number">23</span> <span class="hljs-number">23</span> <span class="hljs-number">42</span> <span class="hljs-number">45</span> <span class="hljs-number">45</span> <span class="hljs-number">56</span> <span class="hljs-number">86</span> <span class="hljs-number">765</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h4><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>Graph类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Graph</span> &#123;<br>    <span class="hljs-keyword">protected</span> List&lt;String&gt; vertex;<span class="hljs-comment">//顶点</span><br>    <span class="hljs-keyword">protected</span>  <span class="hljs-type">int</span>[][] edge;<span class="hljs-comment">//边</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span>[] isVisited;<span class="hljs-comment">//是否被访问</span><br>    <span class="hljs-keyword">protected</span>  <span class="hljs-type">int</span> numOfEdges;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Graph</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-built_in">this</span>.vertex=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(n);<br>        <span class="hljs-built_in">this</span>.edge=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>        <span class="hljs-built_in">this</span>.isVisited=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n];<br>    &#125;<br>    <span class="hljs-comment">//获取结点个数</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumOfVertex</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> vertex.size();<br>    &#125;<br>    <span class="hljs-comment">//打印邻接矩阵</span><br>    <span class="hljs-keyword">protected</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">printGraph</span><span class="hljs-params">()</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">for</span>(String s:vertex) System.out.print(<span class="hljs-string">&quot;  &quot;</span>+s);<br>        System.out.println();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;r&lt;vertex.size();r++)&#123;<br>            System.out.print(vertex.get(r)+<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;vertex.size();i++)&#123;<br>                System.out.print(String.format(<span class="hljs-string">&quot;%2d&quot;</span>,edge[r][i])+<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取边的数目</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumOfEdge</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> numOfEdges;<br>    &#125;<br>    <span class="hljs-comment">//获取某条边的权值</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWeightOfEdges</span><span class="hljs-params">(<span class="hljs-type">int</span> v1,<span class="hljs-type">int</span> v2)</span>&#123;<br>        <span class="hljs-keyword">return</span> edge[v1][v2];<br>    &#125;<br>    <span class="hljs-comment">//添加结点</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addVertex</span><span class="hljs-params">(String v)</span>&#123;<br>        vertex.add(v);<br>    &#125;<br>    <span class="hljs-comment">//添加边</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> v1,<span class="hljs-type">int</span> v2,<span class="hljs-type">int</span> weigeht)</span>&#123;<br>        edge[v1][v2]=weigeht;<br>        edge[v2][v1]=weigeht;<br>        numOfEdges++;<br>    &#125;<br>    <span class="hljs-comment">//获取顶点索引对应的值</span><br>    <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getValueByIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-keyword">return</span> vertex.get(i);<br>    &#125;<br>    <span class="hljs-comment">//实例矩阵</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Graph <span class="hljs-title function_">example</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Graph</span> <span class="hljs-variable">graph</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Graph</span>(<span class="hljs-number">7</span>);<br>        graph.addVertex(<span class="hljs-string">&quot;A&quot;</span>);<br>        graph.addVertex(<span class="hljs-string">&quot;B&quot;</span>);<br>        graph.addVertex(<span class="hljs-string">&quot;C&quot;</span>);<br>        graph.addVertex(<span class="hljs-string">&quot;D&quot;</span>);<br>        graph.addVertex(<span class="hljs-string">&quot;E&quot;</span>);<br>        graph.addVertex(<span class="hljs-string">&quot;F&quot;</span>);<br>        graph.addVertex(<span class="hljs-string">&quot;G&quot;</span>);<br>        graph.addEdge(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>        graph.addEdge(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>);<br>        graph.addEdge(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>);<br>        graph.addEdge(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>);<br>        graph.addEdge(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>);<br>        graph.addEdge(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>);<br>        graph.addEdge(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>);<br>        graph.addEdge(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>);<br>        graph.addEdge(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>);<br>        graph.addEdge(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>);<br>        <span class="hljs-keyword">return</span> graph;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>示例图的邻接矩阵：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">   A  B  C  D  E  F  G<br>A  <span class="hljs-number">0</span>  <span class="hljs-number">5</span>  <span class="hljs-number">7</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">2</span> <br>B  <span class="hljs-number">5</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">9</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">3</span> <br>C  <span class="hljs-number">7</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">8</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span> <br>D  <span class="hljs-number">0</span>  <span class="hljs-number">9</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">4</span>  <span class="hljs-number">0</span> <br>E  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">8</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">5</span>  <span class="hljs-number">4</span> <br>F  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">0</span>  <span class="hljs-number">6</span> <br>G  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">4</span>  <span class="hljs-number">6</span>  <span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><h3 id="求最小生成树"><a href="#求最小生成树" class="headerlink" title="求最小生成树"></a>求最小生成树</h3><p>最小生成树：在连通网的所有生成树中，所有边的代价和最小的生成树，称为最小生成树。<br>应用：通信网络设计、电力输电网络、城市规划等。</p><h4 id="Kruskal算法（加边法）"><a href="#Kruskal算法（加边法）" class="headerlink" title="Kruskal算法（加边法）"></a>Kruskal算法（加边法）</h4><p>初始最小生成树的边数为0，每迭代一次就选择一条满足条件的最小代价边，加入到最小生成树的边集合里面。<br>算法思想：</p><ol><li>把图中所有边按代价从小到大排列</li><li>把图中n个顶点看成独立的n棵树组成的森林</li><li>按权值从小到大选择边，所选的边连接的两个顶点属于两科不同的树（即不成环），则成为最小生成树的一条边，并将这两棵树合并作为一棵树</li><li>重复（3）直到所有的顶点都在一棵树内，或者有n-1条边为止</li></ol><ul><li>代码基本步骤：对边进行排序、把最小的边加入生成树、判断是否产生回路</li><li>代码的重点在于在加边时如何判断是否会成环，在上面的代码中，通过end数组来记录每个顶点的终点，每次加边都更新终点（由于在记录边的时候确保了v1的索引低于v2的索引，所以其实end是从孩子指向双亲的）<br>Kruskal算法代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Kruskal</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getEnd</span><span class="hljs-params">(<span class="hljs-type">int</span>[] ends, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">while</span> (ends[index] != <span class="hljs-number">0</span>) index = ends[index];<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">kruskal</span><span class="hljs-params">(Graph graph)</span> &#123;<br>        <span class="hljs-type">int</span>[] ends = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[graph.getNumOfVertex()];<span class="hljs-comment">//存放顶点的终点信息</span><br>        List&lt;String&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//存放每次连接的路径</span><br>        <span class="hljs-type">int</span>[][] edgeData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[graph.getNumOfEdge()][<span class="hljs-number">3</span>];<span class="hljs-comment">//将顶点存放在数组中，然后根据权值大小排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, count = <span class="hljs-number">0</span>; i &lt; graph.getNumOfVertex() &amp;&amp; count &lt; graph.getNumOfEdge(); i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; graph.getNumOfVertex(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (graph.edge[i][j] != <span class="hljs-number">0</span>) &#123;<br>                    edgeData[count][<span class="hljs-number">0</span>] = graph.edge[i][j];<br>                    edgeData[count][<span class="hljs-number">1</span>] = i;<br>                    edgeData[count][<span class="hljs-number">2</span>] = j;<br>                    count++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        Arrays.sort(edgeData, (e1, e2) -&gt; e1[<span class="hljs-number">0</span>] - e2[<span class="hljs-number">0</span>]);<span class="hljs-comment">//按第一列元素升序排列</span><br>        <span class="hljs-comment">//检查是否有环</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; edgeData.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> getEnd(ends, edgeData[i][<span class="hljs-number">1</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> getEnd(ends, edgeData[i][<span class="hljs-number">2</span>]);<br>            <span class="hljs-keyword">if</span> (v1 != v2) &#123;<br>                ends[v1] = v2;<br>                result.add(<span class="hljs-string">&quot;&lt;&quot;</span> + graph.getValueByIndex(edgeData[i][<span class="hljs-number">1</span>]) + <span class="hljs-string">&quot;,&quot;</span> + graph.getValueByIndex(edgeData[i][<span class="hljs-number">2</span>]) + <span class="hljs-string">&quot;&gt;&quot;</span>);<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-comment">//输出结果</span><br>        System.out.println(<span class="hljs-string">&quot;各顶点间的连接线：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String e : result) System.out.println(e);<br>    &#125;<br><br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>运行结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">各顶点间的连接线：<br>&lt;A,G&gt;<br>&lt;B,G&gt;<br>&lt;D,F&gt;<br>&lt;E,G&gt;<br>&lt;E,F&gt;<br>&lt;A,C&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h4><p>注：G&#x3D;(V,E)是连通图，T&#x3D;(U,D)是最小生成树</p><ol><li>从集合V中取出顶点D放到集合U中，标记顶点的visited[u]&#x3D;1</li><li>若集合U中顶点与集合V中的顶点vj之间存在边，则寻找这些边中权值最小且不构成回路的，添加到U中，标记visited[vj]&#x3D;1</li><li>重复步骤1，直到U与V相等</li></ol><ul><li>代码的关键在于每次从周围吸收一条与之邻接且权值最小的边，以及相连的顶点，直到吸收完所有的顶点。<br>Prim算法代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Prim</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prim</span><span class="hljs-params">(Graph graph,<span class="hljs-type">int</span> v)</span>&#123;<br>        List&lt;String&gt; result=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//存放没每次添加的路径</span><br>        List&lt;Integer&gt; temp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//存放每次遍历到的顶点的索引</span><br>        temp.add(v);<span class="hljs-comment">//先添加第一个点</span><br>        graph.isVisited[v]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> minRoute=Integer.MAX_VALUE;<span class="hljs-comment">//最短边</span><br>        <span class="hljs-type">int</span> nextVertex=<span class="hljs-number">0</span>;<span class="hljs-comment">//下个顶点的索引</span><br>        <span class="hljs-type">int</span> curVertex=<span class="hljs-number">0</span>;<span class="hljs-comment">//当前顶点的索引</span><br>        <span class="hljs-keyword">while</span> (temp.size()&lt;graph.getNumOfVertex())&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;temp.size();j++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;graph.getNumOfVertex();i++)&#123;<br>                    <span class="hljs-keyword">if</span>(graph.edge[temp.get(j)][i]!=<span class="hljs-number">0</span>&amp;&amp;!graph.isVisited[i]&amp;&amp;graph.edge[temp.get(j)][i]&lt;minRoute)&#123;<br>                        minRoute=graph.edge[temp.get(j)][i];<br>                        nextVertex=i;<br>                        curVertex=temp.get(j);<br>                    &#125;<br>                &#125;<br>            &#125;<span class="hljs-comment">//找到当前加入树中的顶点的最小边，确定下一个加入的顶点</span><br>            graph.isVisited[nextVertex]=<span class="hljs-literal">true</span>;<br>            minRoute=Integer.MAX_VALUE;<span class="hljs-comment">//重新设为最大值</span><br>            temp.add(nextVertex);<br>            result.add(<span class="hljs-string">&quot;&lt;&quot;</span>+graph.getValueByIndex(curVertex)+<span class="hljs-string">&quot;,&quot;</span>+graph.getValueByIndex(nextVertex)+<span class="hljs-string">&quot;&gt;&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;各顶点间的连线：&quot;</span>);<br>        <span class="hljs-keyword">for</span>(String e:result) System.out.println(e);<br>        System.out.println();<br>        <span class="hljs-keyword">for</span>(Integer e:temp) System.out.print(graph.getValueByIndex(e)+<span class="hljs-string">&quot; &quot;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>运行结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">各顶点间的连线：<br>&lt;A,G&gt;<br>&lt;G,B&gt;<br>&lt;G,E&gt;<br>&lt;E,F&gt;<br>&lt;F,D&gt;<br>&lt;A,C&gt;<br><br>A G B E F D C <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><h4 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h4><p><code>特点：</code>从起始点开始，采用贪心算法的策略，每次遍历到<br><code>算法思想：</code>设置两个顶点的集合S和T，S中存放已找到最短路径的顶点，T中存放当前还未找到最短路径的顶点。开始时S中只包含原点，然后从T中选择到原点路径最短的顶点加到S中，S中每加入新的顶点u，都要修改原点到T中点的最短距离，最短距离为当前最短路径和原点经过u到该顶点的距离的较小者；重复此过程，直到T中顶点都加入S中。<br>示例代码：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Dijkstra</span><span class="hljs-params">(Graph graph,<span class="hljs-type">int</span> v)</span>&#123;<br>        <span class="hljs-type">int</span>[] dist=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[graph.getNumOfVertex()];<span class="hljs-comment">//最短距离</span><br>        <span class="hljs-type">int</span>[] visited=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[graph.getNumOfVertex()];<span class="hljs-comment">//是否被访问</span><br>        <span class="hljs-type">int</span>[] path=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[graph.getNumOfVertex()];<span class="hljs-comment">//当前最短路径的前一个结点</span><br>        <span class="hljs-type">int</span> u=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> minDis=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//记录v到直接到其他顶点的距离</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; graph.getNumOfVertex(); i++) &#123;<br>            dist[i]=graph.getWeightOfEdges(v,i);<br>            visited[i]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(i!=v&amp;&amp;dist[i]!=Integer.MAX_VALUE)&#123;<br>                path[i]=v;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                path[i]=-<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        visited[v]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; graph.getNumOfVertex(); i++) &#123;<br>            minDis=Integer.MAX_VALUE;<br>            <span class="hljs-comment">//获得未访问顶点的最小值</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; graph.getNumOfVertex(); j++) &#123;<br>                <span class="hljs-keyword">if</span>(visited[j]==<span class="hljs-number">0</span>&amp;&amp;dist[j]&lt;minDis)&#123;<br>                    u=j;<br>                    minDis=dist[j];<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(minDis==Integer.MAX_VALUE) <span class="hljs-keyword">return</span>;<br>            visited[u]=<span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//更新dist和path</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; graph.getNumOfVertex(); j++) &#123;<br>                <span class="hljs-keyword">if</span>(visited[j]==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(graph.getWeightOfEdges(u,j)&lt;Integer.MAX_VALUE&amp;&amp;dist[u]+ graph.getWeightOfEdges(u,j)&lt;dist[j])&#123;<br>                        dist[j]=dist[u]+ graph.getWeightOfEdges(u,j);<br>                        path[j]=u;<br>                    &#125;<br><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d:dist) &#123;<br>            System.out.print(d+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Graph g=Graph.example();<br>        Dijkstra(g,<span class="hljs-number">1</span>);<br><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>上述Graph类的example方法加上以下代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; graph.getNumOfVertex(); i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; graph.getNumOfVertex(); j++) &#123;<br>                <span class="hljs-keyword">if</span>(graph.edge[i][j]==<span class="hljs-number">0</span>&amp;&amp;i!=j)<br>                    graph.edge[i][j]=<span class="hljs-number">9999</span>;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h4><p><code>基本思想：</code></p><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><h3 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h3><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>算法思路：  </p><ol><li>找出最优解的性质，并刻画其结构特征（寻找最优解的子问题结构）</li><li>递归地定义最优值（根据子问题结构建立问题的递归式，求解最优值）</li><li>以自底向上的方式计算出最优值</li><li>根据计算最优值时得到的信息，构造最优解<br>例1：矩阵连乘</li></ol><p>例：找出数字三角形中使数字和最大的路径<br>显然，这个问题可以用递归来求解，以下是C语言代码</p><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>倒排索引是搜索引擎中最常见的索引方式<br>当我们要做对词的索引时，最容易想到的就是建立一个二维数组存储词汇-文档矩阵，这个实现方法很简单，但是要占据相当大的空间，如果有50w个词汇，100w个文档，那么存储就会超过5000亿字节，远大于一台计算机的内存。<br>我们可以发现这个矩阵具有高度的稀疏性，一个文档中可能只有几百个不同的词，那么我们就只需要根据词汇记录包含这个词汇的文档即可。<br>总而言之：正向索引通常记录文档和包含的词，倒排索引中通常记录词和包含该词的文档。  </p><h3 id="单词字典"><a href="#单词字典" class="headerlink" title="单词字典"></a>单词字典</h3><p>对于大规模的文档，可能包含上百万的词汇，快速地找到对应的词直接影响搜索时的响应速度，，所以需要高效的数据结构来对单词字典进行构建和查找，常用的是哈希加链表和树形词典结构。  </p><ol><li>哈希加链表<br>主体是哈希表，每一项保存一个指向冲突链表的指针。</li><li>树形结构<br>B树（B+树）是高效的查找结构，但是不同意哈希查找，B树需要字典项能够按照大小排序<br>一个倒排索引是由单词词典和倒排列表组成的，</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码规范</title>
    <link href="/2023/11/19/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <url>/2023/11/19/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h2 id="使用泛型类"><a href="#使用泛型类" class="headerlink" title="使用泛型类"></a>使用泛型类</h2>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>培训记录</title>
    <link href="/2023/11/18/%E5%9F%B9%E8%AE%AD%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/11/18/%E5%9F%B9%E8%AE%AD%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="第一次培训11-18"><a href="#第一次培训11-18" class="headerlink" title="第一次培训11.18"></a>第一次培训11.18</h2><p>写一个支持四则运算的计算程序<br>输入为num1 op num2,输出炜运算后的结果num3<br>输入的数据都为double类型<br>多考虑可靠性和可拓展性<br>想象成在写一个后台服务的组件<br>Enum类，单例<br>跳跃链表<br>多线程：jvm虚拟机，并发编程的艺术</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>区分内存区域和内存模型<br>  TLAB堆线程<br>引用指向、可达性算法</p>]]></content>
    
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习记录</title>
    <link href="/2023/11/10/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/11/10/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><p>（周六到下个周五为一周）  </p><h3 id="第一周（11-4-11-10）"><a href="#第一周（11-4-11-10）" class="headerlink" title="第一周（11.4-11.10）"></a>第一周（11.4-11.10）</h3><ol><li>headfirstjava学到60面</li><li>搭建了简单的个人博客：<a href="https://comingyu.github.io/">https://comingyu.github.io/</a></li></ol><h3 id="第二周（11-11-11-17）"><a href="#第二周（11-11-11-17）" class="headerlink" title="第二周（11.11-11.17）"></a>第二周（11.11-11.17）</h3><ol><li>headfirstjava:60-106</li><li>泛型</li></ol><h3 id="第三周-11-18-11-24"><a href="#第三周-11-18-11-24" class="headerlink" title="第三周(11.18-11.24)"></a>第三周(11.18-11.24)</h3><ol><li>数据结构与算法：拓扑排序、关键路径、动态规划</li><li>Java：Java类加载机制、内存结构、GC、反射机制</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫学习</title>
    <link href="/2023/11/10/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/11/10/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="爬虫学习"><a href="#爬虫学习" class="headerlink" title="爬虫学习"></a>爬虫学习</h1><h2 id="一般情况下获取网页信息的步骤"><a href="#一般情况下获取网页信息的步骤" class="headerlink" title="一般情况下获取网页信息的步骤"></a>一般情况下获取网页信息的步骤</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br>url=<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span><br>headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.69&#x27;</span><br>    &#125;<br>requests=urllib.request.Request(url=rul,headers=headers)<br><span class="hljs-comment">#获取hanlder对象</span><br>handler=urllib.request.HTTPHandler()<br><span class="hljs-comment">#获取opener对象</span><br>opener=urllib.request.build_opener(handler)<br><span class="hljs-comment">#调用open方法</span><br>opener.<span class="hljs-built_in">open</span>(requests)<br>content=response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br></code></pre></td></tr></table></figure><ol><li>引入request库</li><li>用网页的url和headers建立一个请求对象，如上面url为百度，header中的信息为本机的User-Agent（主要为了伪造成浏览器的访问，防止服务器识别到而禁止访问）</li><li>获取hanlder对象：</li><li>获取opener对象</li><li>调用open方法</li><li>调用read反法读取内容，用utf-8解码</li></ol><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><ol><li>Chrome安装xpath插件，可以直接在Chrome插件商城中安装 <code>[content](https://crxdl.com/)</code></li><li>安装lxml库 <code>pip install import</code></li><li>导入lxml.etree <code>from lxml import etree</code></li><li>xpath解析：<br>1.本地文件：<code>html_tree=etree.parse(&#39;xx.html&#39;)</code><br>常见问题：<br><code>lxml.etree.XMLSyntaxError: Opening and ending tag mismatch: ……</code> xPath解析严格遵守html规范，每个语句必须有结束标签</li></ol><p>  2.服务器响应数据: <code>html_tree=etree.HTML(&#39;xx.html&#39;)</code><br>5. xpath基本语法</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xPath"><span class="hljs-number">1</span>.路径查询<br>    //：查找所有子孙节点，不考虑层级关系<br>    /：找直接子节点<br><span class="hljs-number">2</span>.谓词查询<br>    //div[<span class="hljs-built_in">@id</span>]<br>    //div[<span class="hljs-built_in">@id</span>=<span class="hljs-string">&quot;……&quot;</span>]字符串必须加引号，数字可以不加<br><span class="hljs-number">3</span>.属性查询<br>    //@class<br><span class="hljs-number">4</span>.模糊查询<br>    //div<span class="hljs-built_in">[contains</span>(<span class="hljs-built_in">@id</span>,<span class="hljs-string">&quot;he&quot;</span>)]<br>    //div<span class="hljs-built_in">[starts-with</span>(<span class="hljs-built_in">@id</span>,<span class="hljs-string">&quot;he&quot;</span>)]<br><span class="hljs-number">5</span>.内容查询<br>    //div/h1/<span class="hljs-type">text</span>()<br><span class="hljs-number">6</span>.逻辑运算(较少用到)<br>    //div[@div=<span class="hljs-string">&quot;head&quot;</span> <span class="hljs-keyword">and</span> @class=<span class="hljs-string">&quot;c&quot;</span>]<br>    //title | //title2<br></code></pre></td></tr></table></figure><ol start="6"><li>使用实例：整页下载站长素材上的图片<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-comment">#1.请求对象定制</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_requeset</span>(<span class="hljs-params">page</span>):<br>    <span class="hljs-keyword">if</span>(page==<span class="hljs-number">1</span>):<br>        url=<span class="hljs-string">&#x27;https://sc.chinaz.com/tupian/fengjing.html&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        url=<span class="hljs-string">&#x27;https://sc.chinaz.com/tupian/fengjing_&#x27;</span>+<span class="hljs-built_in">str</span>(page)+<span class="hljs-string">&#x27;.html&#x27;</span><br>    headers=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span><br>    &#125;<br>    request=urllib.request.Request(url=url,headers=headers)<br>    <span class="hljs-keyword">return</span> request<br><span class="hljs-comment">#2.获取网页源码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_content</span>(<span class="hljs-params">request</span>):<br>    response=urllib.request.urlopen(request)<br>    content=response.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> content<br><br><span class="hljs-comment">#下载图片</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>(<span class="hljs-params">content</span>):<br>    tree=etree.HTML(content)<br>    name_list=tree.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;item&quot;]//img/@alt&#x27;</span>)<br>    src_list=tree.xpath(<span class="hljs-string">&#x27;//div[@class=&quot;item&quot;]//img/@data-original&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(name_list[<span class="hljs-number">0</span>])<br>    url=<span class="hljs-string">&quot;https:&quot;</span>+src_list[<span class="hljs-number">0</span>][:-<span class="hljs-number">6</span>]+<span class="hljs-string">&quot;.jpg&quot;</span><br>    urllib.request.urlretrieve(url=url,filename=name_list[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;.jpg&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    start_page=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入起始页码&#x27;</span>))<br>    end_page=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入结束页码&#x27;</span>))<br><br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start_page,end_page+<span class="hljs-number">1</span>):<br>        request=create_requeset(page)<br>        content=get_content(request)<br>        <span class="hljs-comment">#print(content)</span><br>        download(content)<br></code></pre></td></tr></table></figure></li></ol><h3 id="JsonPath"><a href="#JsonPath" class="headerlink" title="JsonPath"></a>JsonPath</h3><ol><li>jsonpath的安装<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install jsonpath<br></code></pre></td></tr></table></figure></li></ol><h3 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h3><h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><p>selenium是一个用于web应用程序测试的工具，直接运行在浏览器中<br>有时候服务器检测到不是真实浏览器访问，给的数据和给真实浏览器的不同，就需要用到selenium  </p><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建chrome webdriver实例</span><br>browser=webdriver.Chrome()<br><span class="hljs-comment">#要访问的地址</span><br>url=<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span><br><span class="hljs-comment">#使用webdriver打开指定的网址</span><br>browser.get(url)<br><span class="hljs-comment">#获取网页源码</span><br>content=browser.page_source<br><br></code></pre></td></tr></table></figure><ol><li><strong>元素定位</strong>：要模拟鼠标和键盘来操作元素，首先需要定位元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#find_element\findelements方法</span><br><span class="hljs-comment">#基本语法：</span><br>element = driver.find_element(by=, value=)<br><span class="hljs-comment">#By表示查找元素的方式，可以是以下几种</span><br>By.ID<br>By.NAME<br>By.CLASS_NAME<br>By.TAG_NAME<br>By.LINK_TEXT<br>By.PARTIAL_LINK_TEXT<br>By.XPATH<br>By.CSS_SELECTOR<span class="hljs-comment">#同bs4语法</span><br><span class="hljs-comment">#value表示用于定位的元素的值</span><br><span class="hljs-comment">#find_element查找当前页面中符合要求的第一个元素，返回一个WebElement对象，find_elements返回一个包含所有匹配元素的列表</span><br></code></pre></td></tr></table></figure>示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">browser=webdriver.Chrome()<br><br>url=<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span><br><br>browser.get(url)<br><br>element=browser.find_element(By.ID,<span class="hljs-string">&#x27;su&#x27;</span>)<br>element2=browser.find_elements(By.XPATH,<span class="hljs-string">&#x27;//input[@id=&quot;su&quot;]&#x27;</span>)<br><span class="hljs-built_in">print</span>(element)<br><span class="hljs-built_in">print</span>(element2)<br></code></pre></td></tr></table></figure>输出结果内容相同，只是element2带中括号</li><li><strong>访问元素信息</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#获取元素属性</span><br>webelement.get_attribute(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">#获取元素文本(即该元素在页面上显示的内容，而非HTML源码中的文本)</span><br>webelement.text<br><span class="hljs-comment">#获取标签名</span><br>webelement.tag_name<br></code></pre></td></tr></table></figure></li><li><strong>交互</strong><br>简单的浏览器交互示例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.service <span class="hljs-keyword">import</span> Service<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment">#创建chrome webdriver实例</span><br>browser=webdriver.Chrome()<br>url=<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span><br>browser.get(url)<br>time.sleep(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#找到搜索文本框</span><br>element=browser.find_element(By.ID,<span class="hljs-string">&#x27;kw&#x27;</span>)<br><span class="hljs-comment">#在文本框中输入“陈奕迅”</span><br>element.send_keys(<span class="hljs-string">&#x27;陈奕迅&#x27;</span>)<br>time.sleep(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#找到百度一下的按钮</span><br>button=browser.find_element(By.ID,<span class="hljs-string">&#x27;su&#x27;</span>)<br><span class="hljs-comment">#点击按钮</span><br>button.click()<br>time.sleep(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#滑倒底部</span><br>js_bottom=<span class="hljs-string">&#x27;document.documentElement.scrollTop=100000&#x27;</span><br>browser.execute_script(js_bottom)<br>time.sleep(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#找到“下一页”</span><br><span class="hljs-built_in">next</span>=browser.find_element(By.XPATH,<span class="hljs-string">&#x27;//a[@class=&quot;n&quot;]&#x27;</span>)<br><span class="hljs-comment">#点击“下一页”</span><br><span class="hljs-built_in">next</span>.click()<br>time.sleep(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#回到上一页</span><br>browser.back()<br>time.sleep(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#再回去</span><br>browser.forward()<br>time.sleep(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li><li>Chrome headless<br>Chrome的headless模式是在不打开浏览器实际窗口的情况下运行Chrome浏览器，好处主要有：不进行css和gui渲染，运行效率要比实际浏览器快很多；不依赖显示设备，可用于远程服务器上执行自动化测试或爬虫任务<br>封装的headless:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.options <span class="hljs-keyword">import</span> Options<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">browser</span>():<br>    chrome_options = Options()<br>    chrome_options.add_argument(<span class="hljs-string">&#x27;--headless&#x27;</span>)<br>    browser = webdriver.Chrome(options=chrome_options)<br>    <span class="hljs-keyword">return</span> browser<br></code></pre></td></tr></table></figure></li></ol><h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>获取网页：<code>response=requests.get(url)</code>返回一个Response对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#类型：models.Response</span><br><span class="hljs-comment">#六个属性</span><br>r.text<span class="hljs-comment">#获取网站源码</span><br>r.encoding<span class="hljs-comment">#访问或定制编码格式</span><br>r.url<span class="hljs-comment">#获取请求的url</span><br>r.content<span class="hljs-comment">#响应的字节类型</span><br>r.status_code<span class="hljs-comment">#响应的状态码</span><br>r.headers<span class="hljs-comment">#响应的头信息</span><br></code></pre></td></tr></table></figure><h3 id="cookie登录（待补充）"><a href="#cookie登录（待补充）" class="headerlink" title="cookie登录（待补充）"></a>cookie登录（待补充）</h3><p>示例：登录古诗文网<br>难点：  </p><ol><li>获取验证码图片，且需要保证将验证码包括在请求内</li><li>在网页源码中找到访问的post请求需要的信息<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&#x27;https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx&#x27;</span><br>headers=&#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;</span>,<br>&#125;<br><br>response=requests.get(url=url,headers=headers)<br>response.encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span><br>content=response.text<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br>soup=BeautifulSoup(content,<span class="hljs-string">&#x27;lxml&#x27;</span>)<br><span class="hljs-comment">#获取_Viewstate</span><br>viewstate=soup.select(<span class="hljs-string">&#x27;#__VIEWSTATE&#x27;</span>)[<span class="hljs-number">0</span>].attrs.get(<span class="hljs-string">&#x27;value&#x27;</span>)<br><span class="hljs-comment">#获取_VIEWSTATEGENERATOR</span><br>viewstategenerator=soup.select(<span class="hljs-string">&#x27;#__VIEWSTATEGENERATOR&#x27;</span>)[<span class="hljs-number">0</span>].attrs.get(<span class="hljs-string">&#x27;value&#x27;</span>)<br><br><span class="hljs-comment">#获取验证码图片</span><br>code=soup.select(<span class="hljs-string">&#x27;#imgCode&#x27;</span>)[<span class="hljs-number">0</span>].attrs.get(<span class="hljs-string">&#x27;src&#x27;</span>)<br>code_url=<span class="hljs-string">&#x27;https://so.gushiwen.cn&#x27;</span>+code<br>session=requests.session()<br>response_code=session.get(code_url)<br>content_code=response_code.content<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;code.jpg&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<span class="hljs-keyword">as</span> fp:<br>    fp.write(content_code)<br>code=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入验证码：&#x27;</span>)<br>data_post=&#123;<br>    <span class="hljs-string">&#x27;__VIEWSTATE&#x27;</span>: viewstate,<br>    <span class="hljs-string">&#x27;__VIEWSTATEGENERATOR&#x27;</span>: viewstategenerator,<br>    <span class="hljs-string">&#x27;from&#x27;</span>: <span class="hljs-string">&#x27;http://so.gushiwen.cn/user/collect.aspx&#x27;</span>,<br>    <span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;19104962022&#x27;</span>,<br>    <span class="hljs-string">&#x27;pwd&#x27;</span>: <span class="hljs-string">&#x27;123456&#x27;</span>,<br>    <span class="hljs-string">&#x27;code&#x27;</span>:code,<br>    <span class="hljs-string">&#x27;denglu&#x27;</span>: <span class="hljs-string">&#x27;登录&#x27;</span><br>&#125;<br>response_post=session.post(url=url,headers=headers,data=data_post)<br>content_post=response_post.text<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;gushiwen.html&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<span class="hljs-keyword">as</span> fp:<br>    fp.write(content_post)<br></code></pre></td></tr></table></figure></li></ol><h2 id="数据结构大作业"><a href="#数据结构大作业" class="headerlink" title="数据结构大作业"></a>数据结构大作业</h2><h3 id="预期步骤"><a href="#预期步骤" class="headerlink" title="预期步骤"></a>预期步骤</h3><p>种子URL： 选择一个或多个起始网址作为种子URL</p><p>下载页面内容： 使用爬虫程序访问主页URL，下载页面的HTML内容。</p><p>解析页面： 从页面的HTML中提取的链需要的链接。HTML解析库（如Beautiful Soup）的工具。</p><p>更新链接队列： 将提取的链接添加到爬虫的链接队列中，以便后续的爬取。</p><p>遍历有向图： 从链接队列中取出一个链接，重复上述过程。这将形成一个有向图的遍历，逐步扩展爬虫的覆盖范围。</p><p>去重： 避免重复爬取相同的页面，可以维护一个已经访问过的URL列表，并在添加链接到队列之前检查其是否已经存在。</p><p>深度&#x2F;广度限制： 可以设置爬虫的深度或广度限制，以控制遍历的范围，防止爬虫无限制地扩展。</p><p>数据存储： 将爬取到的数据存储到数据库中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">original_window = browser.current_window_handle<br><span class="hljs-comment">#获取所有窗口句柄</span><br>all_windows = browser.window_handles<br><span class="hljs-comment"># 切换到新标签页</span><br>new_window = [window <span class="hljs-keyword">for</span> window <span class="hljs-keyword">in</span> all_windows <span class="hljs-keyword">if</span> window != original_window][<span class="hljs-number">0</span>]<br>browser.switch_to.window(new_window)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># import pymysql</span><br><span class="hljs-comment"># conn=pymysql.connect(</span><br><span class="hljs-comment">#     user=&#x27;root&#x27;,</span><br><span class="hljs-comment">#     password=&#x27;231006&#x27;,</span><br><span class="hljs-comment">#     host=&#x27;localhost&#x27;,</span><br><span class="hljs-comment">#     database=&#x27;honey&#x27;,</span><br><span class="hljs-comment">#     port=3306</span><br><span class="hljs-comment"># )</span><br><span class="hljs-comment"># cursor=conn.cursor()</span><br><span class="hljs-comment"># cursor.execute(&#x27;select * from hepanuser;&#x27;)</span><br><span class="hljs-comment"># result =cursor.fetchall()</span><br><br><br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment">#进入B站首页</span><br>url=<span class="hljs-string">&#x27;https://www.bilibili.com/&#x27;</span><br>browser=webdriver.Chrome()<br>browser.get(url)<br>movie=browser.find_element(By.XPATH,<span class="hljs-string">&#x27;//a[text()=&quot;电影&quot; and @class=&quot;channel-link&quot;]&#x27;</span>)<br>movie.click()<br>time.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#进入电影页</span><br>browser.close()<br>browser.switch_to.window(browser.window_handles[<span class="hljs-number">0</span>])<br>time.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#进入全部电影</span><br><span class="hljs-built_in">all</span>=browser.find_elements(By.XPATH,<span class="hljs-string">&#x27;//span[@class=&quot;all&quot;]&#x27;</span>)<br><span class="hljs-built_in">all</span>[<span class="hljs-number">0</span>].click()<br>browser.close()<br>browser.switch_to.window(browser.window_handles[<span class="hljs-number">0</span>])<br>time.sleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h2><p>Scrapy是一个未来爬取网站数据，提取结构性数据而编写的应用框架，可以应用在包括数据挖掘，信息处理或存储历史等一系列的程序中。</p><ol><li>创建爬虫项目<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">scrapy startproject NAME<br><span class="hljs-comment">#不能以数字开头或包含中文</span><br></code></pre></td></tr></table></figure></li><li>创建爬虫文件<br>要在spiders文件夹中去创建爬虫文件：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cd path/spider<br>scrapy genspider NAME URL<br></code></pre></td></tr></table></figure></li><li>运行爬虫代码  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scrapy crawl NAME<br></code></pre></td></tr></table></figure></li></ol><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>倒排索引是搜索引擎中最常见的索引方式<br>当我们要做对词的索引时，最容易想到的就是建立一个二维数组存储词汇-文档矩阵，这个实现方法很简单，但是要占据相当大的空间，如果有50w个词汇，100w个文档，那么存储就会超过5000亿字节，远大于一台计算机的内存。<br>我们可以发现这个矩阵具有高度的稀疏性，一个文档中可能只有几百个不同的词，那么我们就只需要根据词汇记录包含这个词汇的文档即可。<br>总而言之：正向索引通常记录文档和包含的词，倒排索引中通常记录词和包含该词的文档。  </p><h3 id="单词字典"><a href="#单词字典" class="headerlink" title="单词字典"></a>单词字典</h3><p>对于大规模的文档，可能包含上百万的词汇，快速地找到对应的词直接影响搜索时的响应速度，，所以需要高效的数据结构来对单词字典进行构建和查找，常用的是哈希加链表和树形词典结构。  </p><ol><li>哈希加链表<br>主体是哈希表，每一项保存一个指向冲突链表的指针。</li><li>树形结构<br>B树（B+树）是高效的查找结构，但是不同意哈希查找，B树需要字典项能够按照大小排序<br>一个倒排索引是由单词词典和倒排列表组成的，</li></ol><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><p>jieba库</p>]]></content>
    
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>星辰工作室后端笔试题</title>
    <link href="/2023/11/10/%E6%98%9F%E8%BE%B0%E5%90%8E%E7%AB%AF%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <url>/2023/11/10/%E6%98%9F%E8%BE%B0%E5%90%8E%E7%AB%AF%E7%AC%94%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="星辰工作室后端笔试题"><a href="#星辰工作室后端笔试题" class="headerlink" title="星辰工作室后端笔试题"></a>星辰工作室后端笔试题</h1><h2 id="2-语言基础"><a href="#2-语言基础" class="headerlink" title="2.语言基础"></a>2.语言基础</h2><h3 id="2-3双向链表"><a href="#2-3双向链表" class="headerlink" title="2.3双向链表"></a>2.3双向链表</h3><p>定义Node类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> data;<br>    Node prev;<span class="hljs-comment">//储存前一个结点</span><br>    Node next;<span class="hljs-comment">//储存后一个结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span>&#123;<br>        <span class="hljs-built_in">this</span>.data=data;<br>        <span class="hljs-built_in">this</span>.prev=<span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">this</span>.next=<span class="hljs-literal">null</span>;<br>    &#125;<span class="hljs-comment">//定义构造方法，创建对象时传入该结点的数据</span><br>&#125;<span class="hljs-comment">//定义结点</span><br></code></pre></td></tr></table></figure><p>定义DoublyLinkedList类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoublyLinkedList</span>&#123;<br>    <span class="hljs-keyword">private</span> Node head;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DoublyLinkedList</span><span class="hljs-params">()</span>&#123;<br>        head=<span class="hljs-literal">null</span>;<br>    &#125;<span class="hljs-comment">//构造函数将head的引用设为空</span><br>    <span class="hljs-comment">//在尾部增加结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">append</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span>&#123;<br>        Node newNode=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(data);<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">null</span>)&#123;<br>            head=newNode;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            Node current=head;<br>            <span class="hljs-keyword">while</span>(current.next!=<span class="hljs-literal">null</span>)&#123;<br>                current=current.next;<br>            &#125;<br>            current.next=newNode;<br>            newNode.prev=current;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//遍历链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">()</span>&#123;<br>        Node current=head;<br>        <span class="hljs-keyword">while</span>(current!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(current.data+<span class="hljs-string">&quot; &quot;</span>);<br>            current=current.next;<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以通过DoublyLinkedList创建双向链表对象，调用appen方法增加结点，调用printList方法打印链表，可以满足小埋存放每天睡觉小时数的要求。</p><hr><h4 id="2-3-1复用"><a href="#2-3-1复用" class="headerlink" title="2.3.1复用"></a>2.3.1复用</h4><p>定义Node类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;T&gt;&#123;<br>    T data;<br>    Node prev;<span class="hljs-comment">//储存前一个结点</span><br>    Node next;<span class="hljs-comment">//储存后一个结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(T data)</span>&#123;<br>        <span class="hljs-built_in">this</span>.data=data;<br>        <span class="hljs-built_in">this</span>.prev=<span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">this</span>.next=<span class="hljs-literal">null</span>;<br>    &#125;<span class="hljs-comment">//定义构造方法，创建对象时传入该结点的数据</span><br>&#125;<span class="hljs-comment">//定义结点</span><br></code></pre></td></tr></table></figure><p>定义DoublyLinkedList类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoublyLinkedList</span>&lt;T&gt;&#123;<br>    <span class="hljs-keyword">private</span> Node head;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DoublyLinkedList</span><span class="hljs-params">()</span>&#123;<br>        head=<span class="hljs-literal">null</span>;<br>    &#125;<span class="hljs-comment">//构造函数将head的引用设为空</span><br>    <span class="hljs-comment">//在尾部增加结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">append</span><span class="hljs-params">(T data)</span>&#123;<br>        Node newNode=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(data);<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">null</span>)&#123;<br>            head=newNode;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            Node current=head;<br>            <span class="hljs-keyword">while</span>(current.next!=<span class="hljs-literal">null</span>)&#123;<br>                current=current.next;<br>            &#125;<br>            current.next=newNode;<br>            newNode.prev=current;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//遍历链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">()</span>&#123;<br>        Node current=head;<br>        <span class="hljs-keyword">while</span>(current!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(current.data+<span class="hljs-string">&quot; &quot;</span>);<br>            current=current.next;<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>main方法运行示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        DoublyLinkedList dll=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DoublyLinkedList</span>();<br>        dll.append(<span class="hljs-string">&quot;这一天写代码写太晚没有睡觉~&quot;</span>);<br>        dll.append(<span class="hljs-number">20</span>);<br>        dll.append(<span class="hljs-literal">true</span>);<br>        dll.printList();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">这一天写代码写太晚没有睡觉~ <br><span class="hljs-number">20</span> <br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="2-3-3"><a href="#2-3-3" class="headerlink" title="2.3.3"></a>2.3.3</h4><p>main函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        DoublyLinkedList dll=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DoublyLinkedList</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            dll.append(i);<br>        &#125;<span class="hljs-comment">//在链表中添加20个结点</span><br>        dll.circle(<span class="hljs-number">7</span>);<span class="hljs-comment">//在第七个结点成环</span><br>        dll.findcircle();<span class="hljs-comment">//找出成环结点的位置，并消除环</span><br>        System.out.println(<span class="hljs-string">&quot;链表的长度为：&quot;</span>+dll.length());<span class="hljs-comment">//测试是否可以遍历链表来输出链表的长度</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>DoublyLinkedList中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoublyLinkedList</span>&lt;T&gt;&#123;<br>    <span class="hljs-keyword">private</span> Node head;<br>    <span class="hljs-keyword">public</span> Node point;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DoublyLinkedList</span><span class="hljs-params">()</span>&#123;<br>        head=<span class="hljs-literal">null</span>;<br>    &#125;<span class="hljs-comment">//构造函数将head的引用设为空</span><br>    <span class="hljs-comment">//在尾部增加结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">append</span><span class="hljs-params">(T data)</span>&#123;<br>        Node newNode=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(data);<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">null</span>)&#123;<br>            head=newNode;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            Node current=head;<br>            <span class="hljs-keyword">while</span>(current.next!=<span class="hljs-literal">null</span>)&#123;<br>                current=current.next;<br>            &#125;<br>            current.next=newNode;<br>            newNode.prev=current;<br>            point=newNode;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//遍历链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">()</span>&#123;<br>        Node current=head;<br>        <span class="hljs-keyword">while</span>(current!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(current.data+<span class="hljs-string">&quot; &quot;</span>);<br>            current=current.next;<br>        &#125;<br>        System.out.println();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span>&#123;<br>        Node p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> p=head;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(p.next!=<span class="hljs-literal">null</span>)&#123;<br>            p=p.next;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<span class="hljs-comment">//返回链表的长度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">circle</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span>&#123;<br>        Node point1;<br>        <span class="hljs-keyword">if</span>(p&lt;<span class="hljs-built_in">this</span>.length())<br>            point1=head;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; p; i++) &#123;<br>            point1=point1.next;<br>        &#125;<br>        Node mark=point1;<br>        <span class="hljs-keyword">while</span> (point1.next!=<span class="hljs-literal">null</span>)&#123;<br>            point1=point1.next;<br>        &#125;<br>        point1.next=mark;<br>    &#125;<span class="hljs-comment">//将链表的尾部接到第p个结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findcircle</span><span class="hljs-params">()</span>&#123;<br>        Node s1=head;<br>        Node s2=head;<br>        Node p=head;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(s2!=<span class="hljs-literal">null</span>&amp;&amp;s2!=<span class="hljs-literal">null</span>)&#123;<br>            s1=s1.next;<br>            s2=s2.next.next;<br>            <span class="hljs-keyword">if</span>(s1==s2) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">//用s1和s2两个结点，s1每次前进一个结点，s2每次前进两个结点，两个结点将会在环中相遇，且此时s1还没有走完整个环</span><br>        <span class="hljs-comment">//设头结点到成环结点s的长度为x，s到相遇的结点的距离为y，相遇结点到s的距离为z</span><br>        <span class="hljs-comment">//则有2*(x+y)=x+y+n*(y+z),化简为x=(n-1)*(y+z)+z,可知将s1置于头结点，s1和s2同时逐个遍历，当s1到达s时，s2也到达</span><br>        s1=head;<br>        <span class="hljs-keyword">while</span>(s1!=s2)&#123;<br>            s1=s1.next;<br>            s2=s2.next;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (p!=s1)&#123;<br>            p=p.next;<br>            i++;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;成环发生在第&quot;</span>+i+<span class="hljs-string">&quot;个结点&quot;</span>);<br>        <span class="hljs-keyword">while</span> (p.next!=s1)&#123;<br>            p=p.next;<br>        &#125;<br>        p.next=<span class="hljs-literal">null</span>;<br>    &#125;<span class="hljs-comment">//找出链表成环的位置，并消除环</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">成环发生在第<span class="hljs-number">7</span>个结点<br>链表的长度为：<span class="hljs-number">20</span><br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>尝试过多个数据，该findcircle方法可以解决链表尾部成环的问题</p><h3 id="2-4实践题-算法"><a href="#2-4实践题-算法" class="headerlink" title="2.4实践题-算法"></a>2.4实践题-算法</h3><p>该题的涉及到背包问题，使用动态规划的思路来解决，逐个增加背包的体积和炸弹的种类，依次找到每种组合下的最优解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Keli</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> scanner.nextInt(); <span class="hljs-comment">// 炸弹种类数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">V</span> <span class="hljs-operator">=</span> scanner.nextInt(); <span class="hljs-comment">// 背包容量</span><br>        <span class="hljs-type">int</span>[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N]; <span class="hljs-comment">// 炸弹体积</span><br>        <span class="hljs-type">int</span>[] w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N]; <span class="hljs-comment">// 炸弹威力</span><br>        <span class="hljs-type">int</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N]; <span class="hljs-comment">// 每种炸弹的数量限制</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            s[i] = scanner.nextInt();<br>            w[i] = scanner.nextInt();<br>            num[i] = scanner.nextInt();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N + <span class="hljs-number">1</span>][V + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;= V; j++) &#123;<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j]; <span class="hljs-comment">// 初始化为上一行的值</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= num[i - <span class="hljs-number">1</span>] &amp;&amp; k * s[i - <span class="hljs-number">1</span>] &lt;= j; k++) &#123;<br>                    dp[i][j] = Math.max(dp[i][j], dp[i - <span class="hljs-number">1</span>][j - k * s[i - <span class="hljs-number">1</span>]] + k * w[i - <span class="hljs-number">1</span>]);<br>                &#125;<span class="hljs-comment">//每增加一个炸弹都要考虑两种选择：不增加这个炸弹，或者空出体积放这个新炸弹，这两个选择中取总威力的最大值即为当前的最优解</span><br>                <span class="hljs-comment">//同时还要考虑到不要超过炸弹的数量</span><br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;最多能装下的蹦蹦炸弹威力为：&quot;</span> + dp[N][V]);<br>        scanner.close();<br>        <span class="hljs-type">long</span> endTime=System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;运行时间&quot;</span>+(endTime-startTime)+<span class="hljs-string">&quot;毫秒&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">4</span> <span class="hljs-number">5</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span><br>最多能装下的蹦蹦炸弹威力为：<span class="hljs-number">10</span><br>运行时间<span class="hljs-number">2</span>毫秒<br></code></pre></td></tr></table></figure><p>符合预期</p><h2 id="2-5思考题"><a href="#2-5思考题" class="headerlink" title="2.5思考题"></a>2.5思考题</h2><h3 id="2-5-1-常见的排序算法及其复杂度（以从小到大排序为例）"><a href="#2-5-1-常见的排序算法及其复杂度（以从小到大排序为例）" class="headerlink" title="2.5.1 常见的排序算法及其复杂度（以从小到大排序为例）"></a>2.5.1 常见的排序算法及其复杂度（以从小到大排序为例）</h3><ul><li>插入排序（时间：O(n^2);空间：O(1)）：<br>从第二个元素开始每个元素和前一个元素比较，若前一个数更大则该数后移，直到找到一个更小的数。</li><li>希尔排序（时间：O(n);空间：O(1)）<br>先选定一个小于序列长度的数gap作为增量，每隔gap的数为一组，对每组进行插入排序，完成后再选择一个更小的gap进行排序，当gap减小到1时，即为对整个序列插入排序，完成排序。希尔排序先将待排序的序列预排序，时其接近有序，最后再插入排序。</li><li>选择排序：（时间：O(n^2);空间：O(n^2)）<br>每次在序列中选择一个最小值和最大值，分别放在序列的开头和末尾，直到排完全部序列。</li><li>冒泡排序：（时间：O(n^2);空间：O(1)）<br>每次从序列的开头开始排每相邻的两个，每次排完都可以将最大的一个数排到最后确定位置，依次这样排完整个序列。</li><li>归并排序（时间：O(nlongn);空间：O(n)）<br>将序列从中间分成两部分，在将两部分分成四部分，直到分割成一个个的数据，再将这些数据两两比较归并到一起，直到归并成整个序列。</li><li>快速排序——三数取中（时间：O(nlongn);空间：O(longn)）<br>在序列的头尾分别设一个指针low和high，先提取出第一个数，此时low为空，检测不为空的high，大于枢纽值则high左移，小于则填到low的位置，high为空，依次排完整个序列，直到high和low重合，将枢纽值填入该位置，就可以得到两个子序列，再依次对每个子序列用同样的方法排序。</li></ul><hr><h3 id="2-5-2-语言特性"><a href="#2-5-2-语言特性" class="headerlink" title="2.5.2 语言特性"></a>2.5.2 语言特性</h3><ol><li>面向对象和面向过程的内涵和区别：<br>面向过程一般是为了解决当前的问题来设计函数，对于其他不同的问题一般是难以复用的；而面向过程则是考虑到未来的使用，设计不同的类，在类中设计方法，通过继承、多态等功能使得程序不仅对于当前情景有作用，日后面对其他有相同特点的问题时也可以复用一部分，提高开发的效率，同时面向对象的封装特性使得可以将数据和行为封装在对象的内部，可以更好地修改和维护。面向过程的编程会更加适合轻量的程序编写，面向过程则更适合复杂的系统如大型软件的开发。</li></ol><hr><ol start="2"><li>Java 的拆箱和装箱过程以及其作用<br>拆箱是将包装类对象转换成基本数据类型的过程，装箱则是将基本数据类型转换成包装类对象的过程，1.5以后版本的Java中都实现了自动装箱和拆箱的功能，不需要手动创建包装类对象或是用velueof方法等。<br>作用：允许基本数据类型和Object类型的相互转换,可以通过这样的方法来使值类型适用于一些只能使用应用类型的场景，如集合类。</li></ol><hr><ol start="3"><li>String 类型的设计思路<br>不可变性：一旦创建了String类的对象，其值就不能再更改，使得该类对象有这些优点：1.安全性：多个引用可以指向同一个对象，而不用担心其值会被修改；2.线程安全：可以被多个线程安全地共享，不需要额外的同步措施；3.缓存哈希码：哈希值可以在创建的时候就计算和储存，使得字符串在在哈希表等结构中的储存更加高效；4：提高了性能：可共享的字符串内容和创建时就计算和储存的哈希值，减少了内存的占用，提高了性能<br>字符串池：String类的对象通常被储存在字符串池中，以便共享相同内容的字符串，创建字符串字面量时，Java会先检查字符串池中是否有相同的字符串，存在则返回其引用，不存在则会创建新的字符串并放入池中。</li></ol><hr><ol start="4"><li>JDK 8 版本中引入的 Lambda 表达式和函数编程的使用和实现<br>在  JDK8引入的lambda表达式1.使得代码更加的简洁，开发者可以用更少的代码来表示函数或匿名内部类的实例；2.使Java支持函数式编程范式，可以将函数作为参数或者返回值；3.代码的组织更加简单和值观；4.和Stream API配合使用，可以更容易地实现并行编程。<br>使用实例：<br>用Function接口将字符串转换成整型数据之后输出<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Function</span>&lt;T,R&gt; &#123;<br>    R <span class="hljs-title function_">apply</span><span class="hljs-params">(T t)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lambda</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;R&gt;R <span class="hljs-title function_">typeConver</span><span class="hljs-params">(Function&lt;String,R&gt; function)</span>&#123;<br>        String str=<span class="hljs-string">&quot;66666&quot;</span>;<br>        R result=function.apply(str);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<span class="hljs-comment">//定义typeConver方法，将String类型数据转换成泛型R</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Integer result=typeConver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String,Integer&gt;()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(String s)</span>&#123;<br>                <span class="hljs-keyword">return</span> Integer.valueOf(s);<br>            &#125;<br>        &#125;);<span class="hljs-comment">//用Function接口创建一个匿名内部类，并重写其中的抽象方法</span><br>        System.out.println(result);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>lambda表达式对比<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lambda</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;R&gt;R <span class="hljs-title function_">typeConver</span><span class="hljs-params">(Function&lt;String,R&gt; function)</span>&#123;<br>        String str=<span class="hljs-string">&quot;66666&quot;</span>;<br>        R result=function.apply(str);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<span class="hljs-comment">//定义typeConver方法，将String类型数据转换成泛型R</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Integer result=typeConver((String s)-&gt;&#123;<br>            <span class="hljs-keyword">return</span> Integer.valueOf(s);<br>        &#125;);<span class="hljs-comment">//利用lambda表达式，省去了直接创建匿名内部类的步骤，只需要写参数和函数体</span><br>        System.out.println(result);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">66666</span><br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>可见lambda表达式简化了代码的书写，而且提高了代码的可读性  </p><hr><p>Stream流函数式编程实践（在两个集合中过滤出前三个名字为三个字的男演员和姓林的女演员且去除第一个，将两个流合并，并生成实例输出姓名）：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Stream;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Actor</span> &#123;<br>    <span class="hljs-keyword">private</span> String Name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Actor</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-built_in">this</span>.Name=s;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getname</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-built_in">this</span>.Name=s;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> Stream;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;String&gt; manList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        manList.add(<span class="hljs-string">&quot;周润发&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;成龙&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;刘德华&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;吴京&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;周星驰&quot;</span>);<br>        manList.add(<span class="hljs-string">&quot;李连杰&quot;</span>);<br>        ArrayList&lt;String&gt; womanList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        womanList.add(<span class="hljs-string">&quot;林心如&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;张曼玉&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;林青霞&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;柳岩&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;林志玲&quot;</span>);<br>        womanList.add(<span class="hljs-string">&quot;王祖贤&quot;</span>);<br>        Stream&lt;String&gt; manStream=manList.stream().filter(s-&gt;s.length()==<span class="hljs-number">3</span>).limit(<span class="hljs-number">3</span>);<span class="hljs-comment">//过滤前三个名字为三个字的男演员</span><br>        Stream&lt;String&gt; womenStream=womanList.stream().filter(s-&gt;s.startsWith(<span class="hljs-string">&quot;林&quot;</span>)).skip(<span class="hljs-number">1</span>);<span class="hljs-comment">//过滤出姓林的女演员且略去第一个</span><br>        Stream&lt;String&gt; all=Stream.concat(manStream,womenStream);<span class="hljs-comment">//合并两个流</span><br>        all.map(Actor::<span class="hljs-keyword">new</span>).forEach(s-&gt; System.out.println(s.getname()));<span class="hljs-comment">//调用构造方法，输出每个实例的Name</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见lambda表达式配合Stream API可以很大程度上简化代码，提高代码的可读性，函数式编程也可以编写更易于维护和拓展的代码，更轻松地使用并行操作。  </p><hr><ol start="5"><li>Java 中全限定名称相同的两个类的 Class 对象一定 equals() 吗?<br>不一定，两个“class”对象是否相同取决于它们的加载器是否相同，全限定名称相同的两个类对象若加载器不同那么也不会equal()<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自定义类加载器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomClassLoader1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>    <span class="hljs-comment">// 实现自定义类加载逻辑</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomClassLoader2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>    <span class="hljs-comment">// 实现自定义类加载逻辑</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassA</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassB</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoder</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">// 使用不同的类加载器加载同一个类</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader1</span> <span class="hljs-operator">=</span> ClassA.class.getClassLoader();<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomClassLoader1</span>();<br><br>        Class&lt;?&gt; class1 = classLoader1.loadClass(<span class="hljs-string">&quot;FuctionalInterface.Lambda&quot;</span>);<br>        Class&lt;?&gt; class2 = classLoader2.loadClass(<span class="hljs-string">&quot;FuctionalInterface.Lambda&quot;</span>);<br><br>        System.out.println(class1 == class2); <span class="hljs-comment">// 可能返回 false</span><br>        System.out.println(class1.equals(class2)); <span class="hljs-comment">// 可能返回 false</span><br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//尝试了一下好像不行呀</span><br></code></pre></td></tr></table></figure></li></ol><hr><h4 id="2-5-3集合"><a href="#2-5-3集合" class="headerlink" title="2.5.3集合"></a>2.5.3集合</h4><ol><li>请介绍一下 ArrayList 和 LinkedList 的区别<br>ArrayList的底层实现是数组，可以通过索引直接找到元素，遍历上的效率较高，当数组的空间不够时，会再开个原来1.5倍大的新数组，并将原来的数据储存到这个新数组中，这可能会浪费大量的内存，但是可以通过ensureCapacity方法来将容量设置到指定大小，或者通过trimToSize方法来将容量大小设置到当前含的元素的大小。<br>LinkedList的底层逻辑是双向链表，所以它不能像数组那样通过索引直接找到元素，相比于LinkedList来说再遍历上的性能较低，由于通过链表实现，LinkedList不需要像ArrayList那样1.5倍扩容，在增减元素上性能较好。<br>因此频繁查找和修改元素时，一般使用ArrayList；频繁增减元素时，一般使用LinkedList。  </li><li>请介绍一下 HashMap 的实现方式<br>HashMap是一种基于哈希表实现的数据结构，它使用一个数组来储存数据，当插入一个键值对是，HashMap会根据键的哈希值计算出在数组中的位置，然后将该键值对添加到相应的链表中，对键值对进行其他操作时，HashMap也会根据键的哈希值找到其在数组中的位置，然后在相应的链表中进行操作，Java8中，链表的长度大于8时会将链表转化为红黑树，以提高查找效率，当红黑树节点数小于6时，会将其转换为链表。</li></ol><hr><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><ol><li>请介绍一下进程&#x2F;线程&#x2F;协程的区别<br>进程是操作系统中的独立执行单位，有独立的内存空间和资源，进程有较高的隔离性，不能直接共享内存，进程崩溃也不会对其他的进程产生直接的影响。<br>线程是进程内的执行单位，共享同一进程的内存和资源，线程之间可以更加轻松地通信，切换线程比切换进程要更加轻量级。<br>协程是一种轻量级的线程，不依赖于操作系统的进程或线程，由编程语言或库提供支持，通常在单个线程里执行。</li><li>   请介绍一下你对并发的理解, 以及一些保证线程安全的方法<br>并发是指在多核计算机或在多个计算机上同时执行多个任务的能力。并发的目的是让多个进程或线程在同一时间段内执行，同时有效地管理执行线程，以避免数据竞争等并发问题，提高程序的性能和响应性。<br>保证线程安全的方法：1.互斥锁：用于保证任何时候都只有一个线程可以访问共享资源，可以通过’synchronized’关键字来创建互斥锁；2.线程池：可以限制并发线程的数量，避免创建过多的线程。  </li><li>操作系统中线程的实现方式<br>线程在用户空间下实现（用户线程）（多对一）：所有的线程都在用户空间实现，在操作系统看来每个进程只有一个线程，；进行线程切换的速度要远快于在通过操作系统内核切换，同时程序员可以在用户空间实现自己的线程调度算法，当线程数量多时，也不会大量占据操作系统的空间；但是当进程中的一个线程阻塞（如等待输入）时会阻塞整个进程，或者一个线程长时间不释放CPU，会导致其他线程的u到cpu而持续等待。<br>线程在操作系统内核实现（内核线程）（一对一）：线程由操作系统内核直接支持和管理，提供了多线程的高度并发性和并行性，可以充分利用多核的处理器，但是线程的切换开销较大。<br>混合模式（多对多）：程序员可以自行决定使用多少用户线程和内核线程，结合了前两种方式的优点  </li><li>jvm中线程的实现方法<br>每个Java线程都可以由一个Java线程对象表示，这些对象由jvm管理，jvm的线程对象可以映射到内核线程或者用户线程（即上题说到的三种模型），这取决于jvm的具体实现，jvm负责线程的创建、销毁和调度已经线程同步和线程通信，提供了内置的同步机制，同时还允许开发人员调整线程池大小等。  </li><li>Java中synchronized关键字的作用和实现方式<br>作用:保证同一时刻只有一个线程可以执行某个方法或者某个代码块，保证一个线程的变化可以被其他的线程看到。<br>原理：每个线程进入同步代码块（即synchronized修饰的代码块）时，都会尝试获取对象的监视器锁，如果锁被其他线程占用，线程将进入阻塞状态，直到进入同步代码块的线程执行完毕或者调用wait()方法，锁被释放</li></ol><hr><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><ol><li>为什么要有对异常的处理</li></ol><ul><li>可靠性：通过捕获和处理异常，程序可以在发生错误的时候做出正确的处理，而不会因为错误而导致程序崩溃不能运行  </li><li>有助于问题的诊断，可以从异常信息中了解到错误的类型，位置等信息  </li><li>兼容性：使得程序可以在不同的环境下更加健壮地运行，可以适用于不同的错误和异常情况</li><li>可读性：将错误处理代码和正常业务逻辑分开，提高代码的可读性，有助于代码的理解和维护</li></ul><ol start="2"><li>异常的抛出和捕获方法<br>抛出：创建一个异常对象，并使用throw关键字来抛出，例如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;error&quot;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>运行结果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.IllegalArgumentException: error<br>at Main.main(Main.java:<span class="hljs-number">3</span>)<br>```  <br>捕获：异常被抛出时，可以用<span class="hljs-keyword">try</span>-<span class="hljs-keyword">catch</span>来捕获和处理异常，<span class="hljs-keyword">try</span>包含可能引发异常的代码，<span class="hljs-keyword">catch</span>用于捕获和处理异常，可以在<span class="hljs-keyword">try</span>之后使用多个<span class="hljs-keyword">catch</span>来捕获不同的异常，来进行不同的处理，例如：<br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String s=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> length=s.length();<br>            <span class="hljs-type">int</span> num=<span class="hljs-number">10</span>/<span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;An error occurred: &quot;</span> + e.getMessage());<br>        &#125;<span class="hljs-keyword">catch</span>(NullPointerException E)&#123;<br>            System.out.println(<span class="hljs-string">&quot;空引用&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>运行结果<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">空引用<br></code></pre></td></tr></table></figure>代码中用到了两个catch，分别捕获算数异常和空引用异常，try包含的代码中，先抛出了空引用的异常，所以被第二个catch捕获并处理。  </li><li>try-catch-finally模块中finally的执行逻辑<br>finally包含的代码会在try和catch中的代码执行后无论是否发生异常都执行。finally通常用来进行资源的释放和清理工作，如在try中打开文件读取，无论是否发生异常都关闭文件。</li></ol><hr><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ol><li><p>对设计模式的理解<br>设计模式是人间开发人员在开发过程中面临的一般问题的解决方案；是项目迭代的过程中，为了实现一些功能，设计了一些方案，根据这些方案总结出的一些模式体系，并且这些体系被很多开发者接受使用。设计模式广泛地运用于大的项目中，让代码可以更容易被他人理解，保证代码的可靠性。  </p></li><li><p>单例模式，写一个线程安全的单例模式<br>单例模式属于设计模式中的创造型模式，定义是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例模式可以减少内存的开销（如网站首页界面的缓存），避免对资源的多重占用（如文件的读写）<br>线程安全的单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mysql.controller;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton single;<span class="hljs-comment">//声名为volatile，确保多线程之间对single可见</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 私有构造函数</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getsingle</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (single == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 第一次检查</span><br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (single == <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 第二次检查</span><br>                    single = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<span class="hljs-comment">//创建对象</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> single;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>生产者消费者模式是一种多线程设计模式，不属于经典的设计模式，用于解决多线程的环境下，生产者和消费者数据的协同问题。在生产者消费者模式中，生产者和消费者共享一个资源池（缓冲区），生产者线程负责生成数据或任务，并将它们放入资源池，消费者从资源池中获取数据或任务，并执行操作。生产者消费者模式有利于实现线程之间的协作和数据共享，确保数据的安全传递。<br>使用synchronized、wait、notify实现生产者消费者模式示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mysql.controller;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">//使用 synchronized和wait、notify实现生产者和消费者</span><br><span class="hljs-comment">//1.定义资源类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCacheResources1</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//共享资源：生产和消费数字</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//资源池中实际存储的数据个数</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<span class="hljs-comment">//资源池中允许存放的资源数目</span><br><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<span class="hljs-comment">//作为锁</span><br><br>    <span class="hljs-comment">//生产方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">product</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//使用代码块，精确加锁，且synchronized会自动释放锁</span><br>        <span class="hljs-keyword">synchronized</span> (obj) &#123;<br>            <span class="hljs-comment">//当实际元素数量达到总容量是，生产阻塞等待</span><br>            <span class="hljs-keyword">if</span> (count == capacity) &#123;<br>                obj.wait();<br>            &#125;<br>            <span class="hljs-comment">//产生数据</span><br>            num++;<br>            count++;<br>            System.out.println(Thread.currentThread().getName() +<br>                    <span class="hljs-string">&quot;生产了一个数字&quot;</span> + num + <span class="hljs-string">&quot;，资源池剩余数据个数：&quot;</span> + count);<br>            <span class="hljs-comment">//唤醒其他所有线程，让他们竞争锁</span><br>            obj.notifyAll();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//消费的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">synchronized</span> (obj) &#123;<br>            <span class="hljs-comment">//当资源池中没有资源时，消费阻塞，等待</span><br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>                obj.wait();<br>            &#125;<br>            <span class="hljs-comment">//消费数据</span><br>            num--;<br>            count--;<br>            System.out.println(Thread.currentThread().getName() +<br>                    <span class="hljs-string">&quot;消费了一个数字&quot;</span> + num + <span class="hljs-string">&quot;，资源池剩余数据个数：&quot;</span> + count);<br>            <span class="hljs-comment">//唤醒其他所有线程，让他们竞争锁</span><br>            obj.notifyAll();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductAndConsumerTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyCacheResources1</span> <span class="hljs-variable">myCacheResources1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCacheResources1</span>();<br>        <span class="hljs-comment">//用lamda表达式来创建线程</span><br>        <span class="hljs-comment">//生产者</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<span class="hljs-comment">//生产10轮</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    myCacheResources1.product();<br><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;, <span class="hljs-string">&quot;生产者&quot;</span>).start();<br><br>        <span class="hljs-comment">//消费者1</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-comment">//让生产者先 生产数据</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<span class="hljs-comment">//消费10轮，</span><br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    myCacheResources1.consumer();<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<span class="hljs-comment">//模拟消费时间</span><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;消费者1&quot;</span>).start();<br>        <span class="hljs-comment">//消费者2</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-comment">//让生产者先 生产数据</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    myCacheResources1.consumer();<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;消费者2&quot;</span>).start();<br><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">生产者生产了一个数字<span class="hljs-number">1</span>，资源池剩余数据个数：<span class="hljs-number">1</span><br>生产者生产了一个数字<span class="hljs-number">2</span>，资源池剩余数据个数：<span class="hljs-number">2</span><br>生产者生产了一个数字<span class="hljs-number">3</span>，资源池剩余数据个数：<span class="hljs-number">3</span><br>生产者生产了一个数字<span class="hljs-number">4</span>，资源池剩余数据个数：<span class="hljs-number">4</span><br>生产者生产了一个数字<span class="hljs-number">5</span>，资源池剩余数据个数：<span class="hljs-number">5</span><br>消费者<span class="hljs-number">2</span>消费了一个数字<span class="hljs-number">4</span>，资源池剩余数据个数：<span class="hljs-number">4</span><br>消费者<span class="hljs-number">1</span>消费了一个数字<span class="hljs-number">3</span>，资源池剩余数据个数：<span class="hljs-number">3</span><br>生产者生产了一个数字<span class="hljs-number">4</span>，资源池剩余数据个数：<span class="hljs-number">4</span><br>生产者生产了一个数字<span class="hljs-number">5</span>，资源池剩余数据个数：<span class="hljs-number">5</span><br>消费者<span class="hljs-number">2</span>消费了一个数字<span class="hljs-number">4</span>，资源池剩余数据个数：<span class="hljs-number">4</span><br>生产者生产了一个数字<span class="hljs-number">5</span>，资源池剩余数据个数：<span class="hljs-number">5</span><br>消费者<span class="hljs-number">1</span>消费了一个数字<span class="hljs-number">4</span>，资源池剩余数据个数：<span class="hljs-number">4</span><br>生产者生产了一个数字<span class="hljs-number">5</span>，资源池剩余数据个数：<span class="hljs-number">5</span><br>消费者<span class="hljs-number">2</span>消费了一个数字<span class="hljs-number">4</span>，资源池剩余数据个数：<span class="hljs-number">4</span><br>生产者生产了一个数字<span class="hljs-number">5</span>，资源池剩余数据个数：<span class="hljs-number">5</span><br>消费者<span class="hljs-number">1</span>消费了一个数字<span class="hljs-number">4</span>，资源池剩余数据个数：<span class="hljs-number">4</span><br>消费者<span class="hljs-number">2</span>消费了一个数字<span class="hljs-number">3</span>，资源池剩余数据个数：<span class="hljs-number">3</span><br>消费者<span class="hljs-number">1</span>消费了一个数字<span class="hljs-number">2</span>，资源池剩余数据个数：<span class="hljs-number">2</span><br>消费者<span class="hljs-number">2</span>消费了一个数字<span class="hljs-number">1</span>，资源池剩余数据个数：<span class="hljs-number">1</span><br>消费者<span class="hljs-number">1</span>消费了一个数字<span class="hljs-number">0</span>，资源池剩余数据个数：<span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><h3 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h3><p>假设前端在一个请求的 URL 中传来了 name 和 type 参数, 请你从前端请求中取出参数, 并将其以 name-type 的形式返回给前端.<br>用到的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cy.receive_param.pojo;<br><span class="hljs-comment">//封装实体类（存放前端数据）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-keyword">private</span> Cat cat;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, type=&#x27;&quot;</span> + type + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, cat=&quot;</span> + cat +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Cat <span class="hljs-title function_">getCat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cat;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCat</span><span class="hljs-params">(Cat cat)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cat = cat;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">gettype</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">settype</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="0"><li>controller中的方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接收RESTful风格的数据</span><br>    <span class="hljs-meta">@RequestMapping(&quot;add3/&#123;name&#125;/&#123;type&#125;&quot;)</span><br>    <span class="hljs-comment">//占位符和形参相同时用pathvariable给上映射关系会直接传递，不同时这需要注明传递的相应占位符</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add3</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String username, <span class="hljs-meta">@PathVariable</span> String type)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username);<br>        System.out.println(<span class="hljs-string">&quot;type:&quot;</span>+type);<br>        <span class="hljs-keyword">return</span> username+<span class="hljs-string">&quot;-&quot;</span>+type;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><p>从url中获得name和type并返回name-type<br><img src="/image.png" alt="Alt text"></p><ol><li>controller中的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;add1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add1</span><span class="hljs-params">(String username,String type)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;username=&quot;</span>+username);<br>        System.out.println(<span class="hljs-string">&quot;username=&quot;</span>+type);<br>        <span class="hljs-keyword">return</span> username+<span class="hljs-string">&quot;-&quot;</span>+type;<br>    &#125;<br></code></pre></td></tr></table></figure>从body中获得name和type并返回name-type<br><img src="/image-1.png" alt="Alt text"></li><li>controller中的方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;add7&quot;)</span><br>    <span class="hljs-comment">//获取请求头的auth，如果不存在则将authHeader设为null</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add7</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(value = &quot;Authorization&quot;, required = false)</span> String authHeader,User user)</span> &#123;<br>        <span class="hljs-keyword">if</span> (authHeader != <span class="hljs-literal">null</span> &amp;&amp; authHeader.equals(<span class="hljs-string">&quot;Love Star Studio&quot;</span>)) &#123;<br>            <span class="hljs-comment">// 如果Authorization中的数据是&quot;Love Star Studio&quot;则返回name-type数据</span><br>            System.out.println(authHeader);<br>            <span class="hljs-keyword">return</span> user.getUsername()+<span class="hljs-string">&quot;-&quot;</span>+user.gettype();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(authHeader);<br>            <span class="hljs-comment">// 返回 &quot;Invalid User&quot;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Invalid User&quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>auth存在且为Love Star Studio返回name-type<br><img src="/image-2.png" alt="Alt text"><br>auth不存在返回Invalid User<br><img src="/image-3.png" alt="Alt text"></li><li>封装的User类已在上面说明<br>controller中的方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//参数较多时实体类会更加方便简洁</span><br>    <span class="hljs-comment">//前端提交的参数名称需要和类的属性名称保持一致</span><br>    <span class="hljs-meta">@RequestMapping(&quot;add2&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add2</span><span class="hljs-params">(User user)</span>&#123;<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> user.getUsername()+<span class="hljs-string">&quot;-&quot;</span>+user.gettype();<br>    &#125;<br></code></pre></td></tr></table></figure>返回数据<br><img src="/image-4.png" alt="Alt text"></li></ol><h3 id="3-3结合数据库一起写在后端应用中"><a href="#3-3结合数据库一起写在后端应用中" class="headerlink" title="3.3结合数据库一起写在后端应用中"></a>3.3结合数据库一起写在后端应用中</h3><p>controller包HepanUserController类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mysql.controller;<br><br><span class="hljs-keyword">import</span> com.example.mysql.entity.HepanUser;<br><span class="hljs-keyword">import</span> com.example.mysql.service.HepanUserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/hepanUser&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HepanUserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    HepanUserService hepanUserService;<br><br>    <span class="hljs-comment">//添加帖子</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;HepanUser&gt; <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> HepanUser user)</span> &#123;<br>        hepanUserService.add(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(user, HttpStatus.CREATED);<br>    &#125;<br><br>    <span class="hljs-comment">//删除帖子</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        hepanUserService.delete(id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(id + <span class="hljs-string">&quot; deleted&quot;</span>, HttpStatus.OK);<br>    &#125;<br><br>    <span class="hljs-comment">//更改帖子</span><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;HepanUser&gt; <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> HepanUser user)</span> &#123;<br>        hepanUserService.update(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(user, HttpStatus.OK);<br>    &#125;<br><br>    <span class="hljs-comment">//获取全部帖子信息</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;HepanUser&gt;&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;HepanUser&gt; allinfo = hepanUserService.selectAll();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(allinfo, HttpStatus.OK);<br>    &#125;<br><br>    <span class="hljs-comment">//获取对应编号帖子的信息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;HepanUser&gt; <span class="hljs-title function_">selectById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span> &#123;<br>        <span class="hljs-type">HepanUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (HepanUser) hepanUserService.selectById(id);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(HttpStatus.NOT_FOUND);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(user, HttpStatus.OK);<br>    &#125;<br><br>    <span class="hljs-comment">//获取对应名字用户的信息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;HepanUser&gt;&gt; <span class="hljs-title function_">getUsersByName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String name)</span> &#123;<br>        List&lt;HepanUser&gt; userList = hepanUserService.selectByName(name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(userList, HttpStatus.OK);<br>    &#125;<br><br>    <span class="hljs-comment">//获取对应用户名和帖子内容的帖子</span><br>    <span class="hljs-meta">@GetMapping(&quot;/More&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;HepanUser&gt;&gt; <span class="hljs-title function_">getUsersByCriteria</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;username&quot;, required = false)</span> String username,</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;post&quot;, required = false)</span> String post)</span> &#123;<br>        List&lt;HepanUser&gt; userList = hepanUserService.selectByMore(username, post);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(userList, HttpStatus.OK);<br>    &#125;<br><br>    <span class="hljs-comment">//查找对应模糊信息的帖子</span><br>    <span class="hljs-meta">@GetMapping(&quot;/Vaguely&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;HepanUser&gt;&gt; <span class="hljs-title function_">searchVaguely</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;username&quot;, required = false)</span> String username,</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;post&quot;, required = false)</span> String post)</span> &#123;<br>        List&lt;HepanUser&gt; userList = hepanUserService.selectVaguely(username, post);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(userList, HttpStatus.OK);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>entity包HepanUser类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mysql.entity;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HepanUser</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String post;<br>    <span class="hljs-keyword">private</span> Date date;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        sb.append(<span class="hljs-string">&quot;id: &quot;</span>).append(id).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;username: &quot;</span>).append(username).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;post: &quot;</span>).append(post).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;date: &quot;</span>).append(date).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>service包HepanUserService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mysql.service;<br><br><span class="hljs-keyword">import</span> com.example.mysql.entity.HepanUser;<br><span class="hljs-keyword">import</span> com.example.mysql.mapper.HepanUserMapper;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HepanUserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    HepanUserMapper hepanUserMapper;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(HepanUser user)</span> &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">currentDate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        hepanUserMapper.insert(user, currentDate);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> &#123;<br>        hepanUserMapper.delete(id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(HepanUser user)</span> &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">currentDate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        hepanUserMapper.update(user, currentDate);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;HepanUser&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;HepanUser&gt; list = hepanUserMapper.selectAll();<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HepanUser <span class="hljs-title function_">selectById</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> hepanUserMapper.selectById(id);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;HepanUser&gt; <span class="hljs-title function_">selectByName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> hepanUserMapper.selectByName(name);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;HepanUser&gt; <span class="hljs-title function_">selectByMore</span><span class="hljs-params">(String username, String post)</span> &#123;<br>        <span class="hljs-keyword">return</span> hepanUserMapper.selectByMore(username, post);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;HepanUser&gt; <span class="hljs-title function_">selectVaguely</span><span class="hljs-params">(String username, String post)</span> &#123;<br>        <span class="hljs-keyword">return</span> hepanUserMapper.selectVaguely(username, post);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>mapper包HepanUserMapper类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mysql.mapper;<br><br><span class="hljs-keyword">import</span> com.example.mysql.entity.HepanUser;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.*;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HepanUserMapper</span> &#123;<br><br><br>    <span class="hljs-meta">@Insert(&quot;insert into `hepanuser`(username,post,date) values(#&#123;user.username&#125;,#&#123;user.post&#125;,#&#123;date&#125;)&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(HepanUser user, Date date)</span>;<br><br>    <span class="hljs-meta">@Delete(&quot;DELETE FROM `hepanuser` WHERE id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-meta">@Update(&quot;update `hepanuser` set username=#&#123;user.username&#125;,post=#&#123;user.post&#125;,date=#&#123;date&#125; where id=#&#123;user.id&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(HepanUser user, Date date)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from `hepanuser` order by date desc&quot;)</span><br>    List&lt;HepanUser&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from `hepanuser` where id=#&#123;id&#125;&quot;)</span><br>    HepanUser <span class="hljs-title function_">selectById</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from `hepanuser` where username=#&#123;name&#125;&quot;)</span><br>    List&lt;HepanUser&gt; <span class="hljs-title function_">selectByName</span><span class="hljs-params">(String name)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from `hepanuser` where username=#&#123;username&#125; and post=#&#123;post&#125; order by date desc&quot;)</span><br>    List&lt;HepanUser&gt; <span class="hljs-title function_">selectByMore</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username, <span class="hljs-meta">@Param(&quot;post&quot;)</span> String post)</span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from `hepanuser` where username like concat(&#x27;%&#x27;,#&#123;username&#125;,&#x27;%&#x27;) and post like concat(&#x27;%&#x27;,#&#123;post&#125;,&#x27;%&#x27;) order by date desc&quot;)</span><br>    List&lt;HepanUser&gt; <span class="hljs-title function_">selectVaguely</span><span class="hljs-params">(String username, String post)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-4思考题"><a href="#3-4思考题" class="headerlink" title="3.4思考题"></a>3.4思考题</h3><ol><li>RESTful API使用标准的HTTP方法来执行操作，益于理解和使用；同时每个请求都包含了处理请求所需要的所有信息，提高了可拓展性，降低了服务器资源的使用。  </li><li>域名是用户访问网站时的文本标识，<a href="http://www.baidu.com;ip即internet/">www.baidu.com；ip即Internet</a> Protocol，是互联网上每个计算机或设备的唯一数字标识，例如我的计算机主系统在无线局域网的ipv4地址为192.168.137.1，由于ipv4的地址空间无法满足增长的设备数量，所以支持更多设备的ipv6正逐渐取代ipv4；端口是设备上运行的特定应用程序的标识符，通常是十六位的整数，例如默认情况下http端口为80，https为443。<br>当使用域名访问网站或服务时，DNS将域名解析为相应的IP地址，然后数据包通过IP地址的特定端口路由到应用程序。这三者共同构成了互联网通信的基础。</li><li>HTTP是用于传输超文本数据的协议，以明文形式传输；HTTPS是HTTP的安全版本，数据在传输过程中经过加密。HTTP和HTTPS的区别主要在于安全性；<br>还有HTTP不提供数据完整性验证，而HTTPS提供，这可以检测到数据在传输过程中是否被篡改；<br>默认端口方面HTTP默认端口为80，而HTTPS默认端口为443</li><li>结构：请求行（request line）-请求头部（header）-空行-请求正文（request body）<br>请求行：请求的方法（GET、POST等）&#x2F;url&#x2F;http协议版本<br>请求头：通常以键值对形式组织，包含关于请求的相关信息，如User-Agent、Accept等<br>空行：用于分隔头部和正文<br>请求正文：包含请求的数据，通常用于POST请求或其他需要在请求中传递数据的请求  </li><li>四次挥手指的是TCP链接关闭时的四个步骤，用于确保数据的可靠传输和上方的链接正常关闭。<br>第一次：需要关闭连接的一方发送一个TCP报文，包含FIN标志位，表示要求关闭连接，发送后该方进入FIN-WAIT-1状态。<br>第二次：被动关闭方收到含FIN的报文后发送一个ACK作为响应，然后进入CLOSE-WAIT状态，此时仍然可以向主动关闭方发送未发送完的数据。<br>第三次：被动关闭方完成了数据的发送后，发出一个FIN报文，要求关闭连接，然后进入LAST-ACK状态。<br>第四次：主动关闭方收到被动关闭方的FIN报文后，发送一个ACK报文，表示确认，被动关闭方收到后立刻关闭连接，主动关闭方进入TIME-WAIT状态，一段时间后关闭连接，确保网络中的延迟数据包都接收完。 ps:如果被动关闭方没有接收到第四次挥手的ACK报文，会再次发送FIN报文，以确保在网络信道不稳定时可靠地断开连接。<br>四次挥手可以确保数据的完整性，确保连接关闭后不会有潜在的数据包的干扰。</li><li>WebSocket协议是一种用于在客户端和服务器之间建立持久性全双工连接的通信协议。它的出现是为了解决http协议存在的一些限制，如客户端必须发起请求才能收到服务器的响应，WebSocket允许双方建立一个持久且可以双向传输的连接，且可以通过加密来提高数据的安全性。这些减少了频繁创建和关闭连接的性能开销，使应用程序的交互更加实时。但是WebSocket也存在部署的复杂性和兼容性问题。<br>应用方面，WebSocket比HTTP更加适合于需要实时通信的程序，比如网页游戏、视频通话等，而HTTPS更加适合于简单的静态内容传输，如资料的查询。</li></ol><h3 id="3-5文件接收"><a href="#3-5文件接收" class="headerlink" title="3.5文件接收"></a>3.5文件接收</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.restful_api.Controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetFile</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;upload&quot;)</span><br>    <span class="hljs-comment">//将请求中的名为“file”的参数传递到MultiparFile对象上</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFile</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (!file.isEmpty()) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//限定文件格式为png、jpg</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>                <span class="hljs-keyword">if</span>(originalFilename.toLowerCase().endsWith(<span class="hljs-string">&quot;.png&quot;</span>)||originalFilename.toLowerCase().endsWith(<span class="hljs-string">&quot;.jpg&quot;</span>))&#123;<br>                <span class="hljs-comment">//限制文件大小在200MB</span><br>                <span class="hljs-keyword">if</span> (file.getSize() &lt;= <span class="hljs-number">200</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>) &#123;<br>                    <span class="hljs-comment">//将文件读取到字节组中</span><br>                    <span class="hljs-type">byte</span>[] bytes = file.getBytes();<br>                    <span class="hljs-comment">// 将图片数据保存到指定的目录中,并用原文件名作为文件名</span><br>                    Files.write(Paths.get(<span class="hljs-string">&quot;D:\\HuaweiMoveData\\Users\\86191\\Desktop\\后端笔试&quot;</span>, file.getOriginalFilename()), bytes);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/success&quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Larger than 200MB&quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Only .png files are allowed&quot;</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/failure&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-21%20161838.png" alt="Alt text"><br><img src="/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-21%20161918.png" alt="Alt text"></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="4-2数据库基础"><a href="#4-2数据库基础" class="headerlink" title="4.2数据库基础"></a>4.2数据库基础</h3><p><img src="/Capture_20231021_172901.jpg" alt="Alt text"><br>学生表：学号、姓名、性别、班级号；主键：学号<br>班级表：班级号、班级名、人数；主键：班级号<br>老师表：教师编号、姓名、性别、学科；主键：编号<br>老师班级表：学科、教师编号、班级号；主键：班级号、教师编号  </p><h3 id="4-3操作数据库"><a href="#4-3操作数据库" class="headerlink" title="4.3操作数据库"></a>4.3操作数据库</h3><p><img src="/image-7.png" alt="Alt text"><br>表的创建、数据填写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建学生表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Students (<br>    StudentID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    Name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),<br>    Sex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>),<br>    ClassID <span class="hljs-type">INT</span>,<br>    <span class="hljs-keyword">FOREIGN</span> KEY (ClassID) <span class="hljs-keyword">REFERENCES</span> Classes(ClassID)<br>);<br><br><span class="hljs-comment">-- 创建班级表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Classes (<br>    ClassID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    ClassName <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),<br>    NumberOfStudents <span class="hljs-type">INT</span><br>);<br><br><span class="hljs-comment">-- 创建老师表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Teachers (<br>    TeacherID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    Name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),<br>    Sex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>),<br>    Subject <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>)<br>);<br><br><span class="hljs-comment">-- 创建老师班级表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> TeacherClasses (<br>    TeacherID <span class="hljs-type">INT</span>,<br>    ClassID <span class="hljs-type">INT</span>,<br>    Subject <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (TeacherID, ClassID),<br>    <span class="hljs-keyword">FOREIGN</span> KEY (TeacherID) <span class="hljs-keyword">REFERENCES</span> Teachers(TeacherID),<br>    <span class="hljs-keyword">FOREIGN</span> KEY (ClassID) <span class="hljs-keyword">REFERENCES</span> Classes(ClassID)<br>);<br><br><span class="hljs-comment">-- 增</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> classes <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;一班&#x27;</span>,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> classes <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;二班&#x27;</span>,<span class="hljs-number">5</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> classes <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;三班&#x27;</span>,<span class="hljs-number">6</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> classes <span class="hljs-keyword">values</span> (<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;四班&#x27;</span>,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> classes <span class="hljs-keyword">values</span> (<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;五班&#x27;</span>,<span class="hljs-number">5</span>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;颗粒&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;有啦&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;胡桃&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;雷电将军&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;审理零花&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;小工&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">3</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;干预&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;审核&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">3</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;七七&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;客情&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">5</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;琴&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;莫娜&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">5</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">13</span>,<span class="hljs-string">&#x27;心海&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">14</span>,<span class="hljs-string">&#x27;钟离&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;那维莱特&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">5</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">16</span>,<span class="hljs-string">&#x27;万叶&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">17</span>,<span class="hljs-string">&#x27;小红&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;小橙&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">5</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">19</span>,<span class="hljs-string">&#x27;小黄&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">3</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;小绿&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">3</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">21</span>,<span class="hljs-string">&#x27;小青&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">3</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;小蓝&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">3</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">23</span>,<span class="hljs-string">&#x27;小紫&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">5</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Students <span class="hljs-keyword">values</span>(<span class="hljs-number">24</span>,<span class="hljs-string">&#x27;小康&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Teachers <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;刘老师&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;数学&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Teachers <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;王老师&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;语文&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Teachers <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;廖老师&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;英语&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Teachers <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;谢老师&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;语文&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Teachers <span class="hljs-keyword">values</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;李老师&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;英语&#x27;</span>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;数学&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;数学&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;数学&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;数学&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;数学&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;英语&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;英语&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;英语&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;英语&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;英语&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;语文&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;语文&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;语文&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;语文&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> TeacherClasses <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;语文&#x27;</span>);<br></code></pre></td></tr></table></figure><p>删：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> SQL_SAFE_UPDATES <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Students<br><span class="hljs-keyword">WHERE</span> Name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;小康&#x27;</span>;<br></code></pre></td></tr></table></figure><p>改(将小红的Sex改为f)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> Students<br><span class="hljs-keyword">set</span> Sex<span class="hljs-operator">=</span><span class="hljs-string">&#x27;f&#x27;</span><br><span class="hljs-keyword">where</span> Name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;小红&#x27;</span>;<br></code></pre></td></tr></table></figure><p>查（查找全部Students数据）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Students;<br></code></pre></td></tr></table></figure><p><img src="/image-5.png" alt="Alt text"><br>统计每个老师有多少学生：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> t.Name, <span class="hljs-built_in">COUNT</span>(s.StudentID) <span class="hljs-keyword">AS</span> StudentCount<br><span class="hljs-keyword">FROM</span> Teachers t<br><span class="hljs-keyword">JOIN</span> TeacherClasses tc <span class="hljs-keyword">ON</span> t.TeacherID <span class="hljs-operator">=</span> tc.TeacherID<br><span class="hljs-keyword">JOIN</span> Students s <span class="hljs-keyword">ON</span> tc.ClassID <span class="hljs-operator">=</span> s.ClassID<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> t.TeacherID<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> StudentCount <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>将teachserclasses和Teachers关联<br>将Students和teacherclasses关联<br>根据老师的id分组，分别统计每组的学生数<br>根据学生数降序排列<br>输出老师的name和学生数<br><img src="/image-6.png" alt="Alt text"></p><h3 id="4-4思考题"><a href="#4-4思考题" class="headerlink" title="4.4思考题"></a>4.4思考题</h3><p>ACID分别表示原子性、一致性、隔离性、持久性，这些是确保数据库操作可靠性和一致性的关键特性。<br>原子性Atomicity：事务中的每个操作都一个不可分割的工作单位，事务中的操作要么全部成功要么全部失败，每次对数据改动时，都将对应的undolog记录下来，如果某次操作异常，就会反向执行每次操作的undolog，让所以数据回到操作之前。<br>隔离性isolation：多个事务并行执行时，每个事务都被隔离开，不能相互干扰，分为写与写隔离和写与读隔离。<br>持久性durability:事务一旦成功提交就，结果就永久地保存在数据库中了。<br>一致性consistency：确保事务的执行前后，数据库的状态都是一致且稳定的。前三个特性可以说是为一致性服务的。</p><h3 id="4-5思考题"><a href="#4-5思考题" class="headerlink" title="4.5思考题"></a>4.5思考题</h3><p>数据表如下图：  </p><p>RBAC0:RBAC0是RABC的核心，定义了能构成RABC控制系统的最小的元素集合，由用户、角色、会话、许可四部分组成。用户和角色、角色和许可都是多对多的关系，用户和会话、会话和角色都是一对一的关系，当角色被指定给用户时，用户就拥有了改角色所包含的许可，用户要通过会话才能设置角色。<br>RABC1:是RABC的分层模型，建立在RABC0的基础上，在角色中引入了继承的概念。使用场景：分店的店长有访问自己分店财务数据的权限，老板有访问所有分店的财务数据的权限。<br>RABC2:是RABC的约束模型，建立在RABC0的基础上，加入了约束的概念，主要引入了静态职责分离SSD(Static Separation of Duty)和动态职责分离DSD(Dynamic Separation of Duty)。SSD是角色指派给用户阶段加入的，主要有：互斥角色（两个互斥角色只能有一个）、基数约束（用户拥有的角色权限和角色对应的用户数是有限的）、先决条件约束：（要高级角色必须先有低级角色），DSD是会话和角色之间的约束，可以动态约束用户拥有的角色，如一个用户有两个角色但只能激活一个。<br>使用场景：互斥角色：财务部的会计和审核；基数约束：CEO只能有一个，某人不能同时是COO和CFO；先决条件约束：要是豪华VIP得先是VIP；DSD：用户既有参赛者和评委身份只能用一个，三国杀抽多张武将只能选一个。<br>RABC3：是RABC1和RABC2的合集。</p><h2 id="5-后端应用"><a href="#5-后端应用" class="headerlink" title="5.后端应用"></a>5.后端应用</h2><h3 id="5-1实践题见3-4"><a href="#5-1实践题见3-4" class="headerlink" title="5.1实践题见3.4"></a>5.1实践题见3.4</h3><h3 id="5-2"><a href="#5-2" class="headerlink" title="5.2"></a>5.2</h3><p>JWT权限认证：用户登入时，生成一个JWT返回给客户端，在客户端的每个请求中包含JWT，服务端验证JWT的签名检查用户的权限声明（如角色标识）是否有权执行相应的操作，有权则执行操作，无权则返回信息告知用户。</p><h3 id="5-3"><a href="#5-3" class="headerlink" title="5.3"></a>5.3</h3><ol><li>利用数据库中主键的唯一性，适用于插入操作。</li><li>数据库乐观锁，在表中多加一个字段，作为版本标识，执行更新时不仅验证id还要验证版本，防止重复更新，确定是要更新的内容，使用于更新操作 。</li><li>防重Token，客户端先调用接口获取Token，服务端会生成一个Token串，将其作为key储存到Redis数据库中（设置过期时间），再将Token返回到客户端，客户端把Token存入请求的Header中，发送请求，服务端根据请求中的Token到数据库中查找对应的key是否存在，存在且value匹配则删除然后执行业务，否则返回错误信息，适用于插入、更新、删除。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java</title>
    <link href="/2023/11/10/Java/"/>
    <url>/2023/11/10/Java/</url>
    
    <content type="html"><![CDATA[<h2 id="Head-first-java学习"><a href="#Head-first-java学习" class="headerlink" title="Head first java学习"></a>Head first java学习</h2><h3 id="Java的程序结构"><a href="#Java的程序结构" class="headerlink" title="Java的程序结构"></a>Java的程序结构</h3><ul><li>类存在于源文件里，方法存在于类里，语句存在于方法中  </li><li>Java虚拟机启动执行时，会寻找在命令类所指定的类，然后锁定到main方法，每个Java程序都至少有一个类以及一个main()，每个应用程序只有一个main函数。</li><li>要执行程序就代表要命令JVM去加载这个类，开始执行他的main()，直到运行到main的所有程序代码结束。</li><li>真正被执行的是类。</li></ul><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><ul><li>Java不能直接用整数类型测试，例如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(x)&#123;&#125;;<br></code></pre></td></tr></table></figure>Java中integer和Boolean两种类型并不相容，，这么写在Java中是不行的，但是在其他一些语言中可以。</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li>字符串中不能直接打出换行，需要使用换行符\n，如果要直接打出换行要使用一对三重引号。</li></ul><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><ul><li><p>对象本身已知的事物被称为：实例变量<br>对象可以执行的动作称为：方法</p></li><li><p>类是对象的蓝图；它会告诉虚拟机如何创建某种类型的对象，根据类创建出的对象都会有自己的示例变量。</p></li><li><p>创建对象时，它会被存放于被称为堆的内存区域中，这个区域是回收垃圾的堆（Garbage-Collectible Heap），Java根据对象的大小分配空间，当某个对象被JVM察觉到不会再使用到时，该对象就会被标记为可回收的，如果内存开始不足，垃圾收集器就会启动，回收空间。</p></li><li><p>庞大文件的处理方法：将所有文件包装进一句pkzip格式来存档的.jar文件，jar文件中有一个简单的文字格式文字文件，被称为manifest定义有jar中有哪一个文件带有启动程序的main方法。</p></li><li><p>boolean类型数据的位数由Java虚拟机来决定，char16bits，byte、short、int、long的位数为8bits到64bits。</p></li><li><p>小数类型的数据除非加上f，不然都当作double类型处理</p></li><li><h4 id="对象的声名与创建的三个步骤："><a href="#对象的声名与创建的三个步骤：" class="headerlink" title="对象的声名与创建的三个步骤："></a>对象的声名与创建的三个步骤：</h4><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Dog myDog=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br></code></pre></td></tr></table></figure></li></ul><ol><li>声名引用变量（Dog myDog）:要求Java虚拟机分配空间给引用变量，并将此变量命名为myDog，此引用变量将被固定为Dog类型。</li><li>创建对象（new Dog（））：要求Java虚拟机分配堆空间给新建立的Dog对象。</li><li>连接对象和引用（&#x3D;）：将创建的Dog对象赋值给myDog这个引用。</li></ol><ul><li>对于任意一个Java虚拟机来说，所有的对象引用的大小都是一样的，但不同的Java虚拟机可能用不同的方式来表示引用，所以大小可能不相同。</li><li>当对象没有引用时，被作为垃圾收集器，内存不足时被回收。</li><li><h4 id="数组变量："><a href="#数组变量：" class="headerlink" title="数组变量："></a>数组变量：</h4>数组是一个对象，不论里面放的是primitive主数据类型还是引用变量，一旦数组被声名，就只能装入所声名类型的元素（除了byte元素可以放进int数组中）</li></ul><h4 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h4><ol><li>变量有两种：primitive主数据类型和引用类型</li><li>引用变量的值代表位于堆的对象的存取方法</li><li>primitive主数据类型变量值是该值的字节所表示的</li></ol><h3 id="第四章-对象的行为"><a href="#第四章-对象的行为" class="headerlink" title="第四章-对象的行为"></a>第四章-对象的行为</h3><ul><li>方法声名为有返回值就必须返回所声名类型的值，或是与声名类型兼容的值。（但是Java中未要求一定要处理返回的值）</li><li>Java是通过值传递的，也就是通过拷贝传递。当以x为参数传入方法中时，x字节组合会被拷贝并装进参数z中，再方法中改变z的值，x的值不会改变，也就是说传给z的只是一个拷贝。</li><li>方法只能返回单一的值</li><li>封装：指的是将数据（属性）和操作数据的方法（方法）捆绑在一起，并对外部隐藏对象的内部实现细节。封装的目的是为了保护对象的状态，防止外部直接访问对象的内部数据，只允许通过对象的公共接口（方法）来访问和操作数据。&#x2F;需要防止暴露出类的实例变量（即可通过圆点运算符来存取），例如可以在setter方法中对设定的值加以限制，退回不合理的值、直接抛出错误或作修改。</li><li>设计getter和简单设置值的setter的目的是防止以后需要对设置或返回的值加以限制，这样就可以只修改方法而不需要去修改其他部分的程序。</li><li>实例变量永远都会有默认值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">integers：<span class="hljs-number">0</span><br>floating points:<span class="hljs-number">0.0</span><br>booleans:<span class="hljs-literal">false</span><br>references:<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure></li><li>实例变量和局部变量：<br>示例变量声名在类中，而局部变量声名在方法中，局部变量在使用前必须要初始化。</li><li>变量的比较：<br>“&#x3D;&#x3D;”只用来比较两个变量的字节组合</li></ul><h4 id="第五章-超强力的方法"><a href="#第五章-超强力的方法" class="headerlink" title="第五章-超强力的方法"></a>第五章-超强力的方法</h4><ul><li>创建新的类时，通常需要写出：伪码、测试码、真实码</li><li>伪码描述要做什么事，而不是如何做</li><li>从Java5开始，Java就有成为加强版的for循环，它能够很容易地逐个运行数组或者其他集合的元素。</li></ul><h4 id="认识Java的API"><a href="#认识Java的API" class="headerlink" title="认识Java的API"></a>认识Java的API</h4><ul><li>ArrayList要保存primitive主类型需要把数据包装起来，在Java5以上的版本包装工作会自动进行。</li><li>比较ArrayList和一般数组：<br>一般数组在创建时需要指定大小<br>存放对象给一般数组时必须指定位置<br>一般数组使用特殊的语法<br>在Java5中，ArrayList是参数化的。如：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。<br>反射就是把Java类中的各种成分映射成一个个的Java对象。</p><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>属于java.lang包，class类的实例表示正在运行的Java应用程序中的类和接口，每个加载到JVM中的类都会有一个对应的class对象，该对象包含有关类的结构和行为的信息</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h3><p>类的加载时JVM在运行时将类的字节码加载到内存中的过程，类加载是Java程序执行的一个关键步骤，涉及以下三个阶段：  </p><ol><li>加载（Loading）：类加载器查找并加载类的字节码，类加载器根据类的全名来定位并读取类文件，然后将其转换为内部表示，并储存在JVM的方法区（Method Area）。</li><li>链接（Linking）：类加载器将被加载的类合并到JVM的运行环境中，分为三个子阶段：<br>a. 验证（Verification）：确保被加载的类的字节码是有效且符合规范的。<br>b. 准备（Preparation）：为类的静态变量分配内存，并设置默认初始值。<br>c. 解析（Resolution）：将类、接口、字段和方法的符号引用解析为直接引用。  </li><li>初始化（Initialization）：执行类的初始化代码，包括静态变量的赋值和静态代码块的执行。<br>类的初始化是一个延迟的过程，只有在对类进行首次主动引用时才会触发，如以下情况：</li></ol><ul><li>创建类的示例</li><li>访问类或接口的静态变量或者对这些变量赋值</li><li>调用类的静态方法</li><li>使用反射的方式来创建类的示例、访问类的字段或调用类的方法</li><li>初始化一个类的子类</li><li>启动类的主方法，如果一个类在初始化的过程中遇到了异常，该类将被标记为初始化失败，后续对该类的引用将触发初始化异常。</li></ul><h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此。因此所有的加载请求最终都应该传到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p><ol><li>启动类加载器</li><li>拓展类加载器</li><li>应用程序类加载器</li></ol><h3 id="java内存结构"><a href="#java内存结构" class="headerlink" title="java内存结构"></a>java内存结构</h3><p><img src="https://img-blog.csdnimg.cn/f000ce5ddb8e42799994c705c7d7c48f.png" alt="image"><br> <img src="https://img-blog.csdnimg.cn/6e5cc09a179c4e0e935455ab34f3c654.png" alt="image"><br> <strong><code>栈</code><strong>：<br> 特性：先进后出、</strong>储存对基本数据类型的变量和对象的引用</strong>、大小固定，由系统预先定义。<br> 存储内容：方法调用时，每个方法都会在栈上创建一个栈帧，用于存储局部变量、方法参数、返回地址以及方法执行过程中的临时数据；栈上保存的数据时线程私有的，每个线程都有自己的栈<br> 生命周期：栈上的数据的生命周期与方法的调用周期相同，当方法执行完毕时，栈帧会被弹出，其中的数据也会被释放<br> 效率：由于栈上的操作仅涉及到了指针的移动，访问的速度相对较快<br> <strong><code>堆</code><strong>：<br>特性：用于动态分配的内存区域，</strong>存储的时对象实例和数组</strong>；多个线程共享堆，因此是线程共享的区域。<br>存储内容：包括由“new”关键字创建的对象实例和数组；对象本身。<br>生命周期：堆上的对象的生命周期不受限于方法的生命周期，需要通垃圾回收器收集，当对象不在被引用使时，垃圾回收器将会回收它们占用的内存。<br>效率：由于堆上的内存分配和回收涉及到复杂的算法，因此相对于栈上的操作，堆上的操作较慢。<br><strong><code>方法区</code><strong>：<br>线程共享，存放已被加载的的类的信息、常量、静态变量、即时编译器编译后的代码等信息。</strong>在Java8之前的版本，方法区是永久代的一部分，但是由于永久代容易发生内存泄漏和溢出问题，因此在Java8及之后的版本方法区的实现被移到了本地内存中，不再是jvm堆内存的一部分，这个本地内存被称为元空间。</strong><br><strong><code>元数据</code></strong><br>元数据（metadata）是指描述数据的数据，或者说是关于数据的信息。在Java中，元数据通常指的是类的元数据信息，包括类的结构、方法、字段、注释等。元数据是的jvm可以了解和管理运行时加载类的结构，这对于Java的反射机制、动态代理、注解处理器等特性都至关重要。<br>**<code>元空间</code>**：<br>元空间是方法区的一种实现，主要的目的是解决永久代的一些问题，不同于永久代，元空间不会设置一个固定的大小，而是会根据应用程序的需要动态地调整。特点包括：动态大小、GC的变化、本地内存。<br><strong><code>本地方法栈</code></strong><br>Native关键字修饰的方法，都会调用底层的c语言库，和JNI接口（Java Native Interface），目的是拓展Java的使用，融合不同的语言为Java所用。<br><img src="https://img-blog.csdnimg.cn/7dc636714e04401dafb2f9c57c373dfa.png" alt="image">  </p><h3 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h3><p>jvm中的堆一般分为三大部分：新生代、老年代、永久代（Java8中移除）  </p><ol><li><strong>新生代</strong>：<br>用来存放新生的对象，一般占据1&#x2F;3的堆空间<br>新生代又分为三个区：Eden、S0、S1（SurvivorFrom、SurvivorTo）<br><strong>Eden</strong>：新对象的出生地（如果对象占用的内存很大，则直接分配到老年代）当Eden区内存不够时，会触发MinorGC，对新生代进行一次垃圾回收。<br><strong>SurvivorFrom</strong>:上一次GC的幸存者，作为这一次GC的被扫描者<br><strong>SurvivorTo</strong>：保留了一次MinorGC的幸存者</li></ol><ul><li>三个区的比例为8：1：1，两个幸存者区复制后发生交换，空的就是SurviorTo区，jvm每次只会用Eden和一块Survivor区来为对象服务,所以新生代的实际可用空间只有90%</li><li>当jvm无法为新建的对象分配内存空间的时候（Eden满了）MinorGC被触发</li></ul><ol start="2"><li><strong>老年代</strong>：</li></ol><ul><li>老年代的对象比较稳定，所以MajorGC不会频繁执行。</li><li>在进行MajorGC前一般都先进行了一次MinorGC，使得有新生代的对象进入老年代，导致空间不够用时才触发；当无法找到足够大的连续空间分配给新创建的较大对象时也会提前触发一次MajorGC</li></ul>]]></content>
    
    
    <categories>
      
      <category>语言学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
